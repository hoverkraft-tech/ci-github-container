---
name: "Release Helm Chart"
description: |
  Action to release a Helm chart to OCI registry.
  Supports umbrella charts: if a chart has local dependencies having version 0.0.0,
  the action will update those dependencies version with the given tag, then update the Chart.lock accordingly.
author: Hoverkraft
branding:
  icon: upload-cloud
  color: gray-dark

inputs:
  oci-registry:
    description: |
      OCI registry where to push chart.
      See <https://github.com/appany/helm-oci-chart-releaser#usage>.
    required: true
    default: "ghcr.io"
  oci-registry-username:
    required: true
    description: |
      OCI registry username.
      See <https://github.com/appany/helm-oci-chart-releaser#usage>.
    default: ${{ github.repository_owner }}
  oci-registry-password:
    required: true
    description: |
      OCI registry password.
      See <https://github.com/appany/helm-oci-chart-releaser#usage>.
    default: ${{ github.token }}
  chart:
    description: "Chart name to release"
    required: true
  path:
    description: "Path to the chart to release"
    required: true
  values:
    description: |
      Define charts values to be filled.
      Format: `[{ file, path, value }]`.
      Example: [
        {
          "file": "charts/application/charts/api/values.yaml",
          "path": ".image.registry", "value": "ghcr.io"
        }
      ].
      See <https://mikefarah.gitbook.io/yq/>
    required: false
  helm-repositories:
    description: |
      List of Helm repositories to add before release charts.
      See <https://helm.sh/docs/helm/helm_repo_add/>.
    required: false
  tag:
    description: "The release tag to set to chart"
    required: true

outputs:
  image:
    value: ${{ steps.chart-releaser.outputs.image }}
    description: |
      Chart image (Default '{registry}/{repository}/{image}:{tag}').
      See <https://github.com/appany/helm-oci-chart-releaser>.

runs:
  using: "composite"
  steps:
    - uses: hoverkraft-tech/ci-github-common/actions/checkout@95664be4ec235bfc221c4356c7153cbab3fb8f93 # 0.22.3

    - id: chart-values-updates
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      with:
        script: |
          const path = require('node:path');

          const yqUpdates = {};
          const basePath = `${{ inputs.path }}`;
          if (!basePath) {
            throw new Error(`"path" input is missing`);
          }

          const tag = `${{ inputs.tag }}`;
          if (!tag) {
            throw new Error(`"tag" input is missing`);
          }

          // Chart.yml files
          const globber = await glob.create(`${basePath}/**/Chart.yaml`, {followSymbolicLinks: false})
          for await (const chartFile of globber.globGenerator()) {
            const filePath = path.relative(`${{ github.workspace }}`, chartFile);
            if (!yqUpdates[filePath]) {
              yqUpdates[filePath] = [];
            }

            const isRootChart = filePath === `${basePath}/Chart.yaml`;
            if (isRootChart) {
              // Update name for root chart
              yqUpdates[filePath].push(`.name = "${{ github.event.repository.name }}"`);

              // Update dependencies version where repository starts with file://
              yqUpdates[filePath].push(`(.dependencies[] | select(.repository == "file://*")).version = "${tag}"`);
            }

            // Update version fields
            yqUpdates[filePath].push(`.version = "${tag}"`);
            yqUpdates[filePath].push(`.appVersion = "${tag}"`);
          }

          // values.yml files
          const chartValuesInput = `${{ inputs.values }}`;
          if (chartValuesInput) {

            // Check if is valid Json
            let chartValues = null;
            try {
              chartValues = JSON.parse(chartValuesInput);
            } catch (error) {
              throw new Error(`"values" input is not a valid JSON: ${error}`);
            }

            // Check if is an array
            if (!Array.isArray(chartValues)) {
              throw new Error(`"values" input is not an array`);
            }

            if (chartValues.length) {
              const defaultValuesPath = "values.yaml";

              // Check each item
              for (const key in chartValues) {
                const chartValue = chartValues[key];
                if (typeof chartValue !== 'object') {
                  throw new Error(`"values[${key}]" input is not an object`);
                }

                // Check mandatory properties
                for (const property of ['path', 'value']) {
                  if (!chartValue.hasOwnProperty(property)) {
                    throw new Error(`"values[${key}].${property}" input is missing`);
                  }
                }

                const valueFilePath = chartValue['file'] ? chartValue['file'] : defaultValuesPath;
                const filePath = `${basePath}/${valueFilePath}`;

                if (!yqUpdates[filePath]) {
                  yqUpdates[filePath] = [];
                }

                yqUpdates[filePath].push(`${chartValue.path} = "${chartValue.value}"`);
              }
            }
          }

          // Build yq commands
          const yqCommands = Object.entries(yqUpdates).map(([filePath, updates]) => {
            return `yq -i '${updates.join(' | ')}' ${filePath}`;
          });

          core.setOutput('yq-command', yqCommands.join('\n'));

    - uses: mikefarah/yq@8bf425b4d1344db7cd469a8d10a390876e0c77fd # v4.45.1
      with:
        cmd: |
          ${{ steps.chart-values-updates.outputs.yq-command }}

    - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0

    - shell: bash
      run: npm install yaml

    - name: Rewrite the Chart.lock to match with updated ombrella dependencies if any
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      with:
        script: |
          const fs = require('node:fs');
          const path = require('node:path');
          const crypto = require('node:crypto');
          const yaml = require("yaml");

          const rootChartFile = `${{ inputs.path }}/Chart.yaml`;
          const rootChartFileContent = yaml.parse(fs.readFileSync(rootChartFile, 'utf8'));

          // Check if the root chart has dependencies
          if (!rootChartFileContent.dependencies || rootChartFileContent.dependencies.length === 0) {
            return;
          }

          const chartLockFile = `${{ inputs.path }}/Chart.lock`;
          if (!fs.existsSync(chartLockFile)) {
            return core.setFailed(`Chart.lock file not found: ${chartLockFile}`);
          }

          const chartLockFileContent = yaml.parse(fs.readFileSync(chartLockFile, 'utf8'));

          // Update ombrella dependencies versions
          let hasLocalDependencies = false;
          const dependencies = chartLockFileContent.dependencies;

          // Check if dependencies are empt
          for (const dependency of dependencies) {
            const isLocalDependency = dependency.repository.startsWith("file://") && dependency.version === "0.0.0";

            // Check if the dependency is a local file
            if (isLocalDependency) {
              // Update the version to the tag
              dependency.version = `${{ inputs.tag }}`;
              hasLocalDependencies = true;
            }
          }

          // If no local dependencies, exit
          if (!hasLocalDependencies) {
            return;
          }

          // Update generated
          chartLockFileContent.generated = new Date().toISOString();

          // Update global digest.

          // See Helm hashReq function: https://github.com/helm/helm/blob/99c065789ef8c45bade24d4bc2d33432595de956/internal/resolver/resolver.go#L214
          function hashReq(req, lock) {
            // Sort the dependencies
            req = req.map(sortDependencyFields);
            lock = lock.map(sortDependencyFields);

            const data = JSON.stringify([req, lock]);
            const hash = digest(data);
            return `sha256:${hash}`;
          }

          function digest(input) {
            const hash = crypto.createHash('sha256');
            hash.update(input);
            return hash.digest('hex');
          }

          // Should respect the Helm struct order
          // See https://github.com/helm/helm/blob/99c065789ef8c45bade24d4bc2d33432595de956/pkg/chart/v2/dependency.go#L24
          function sortDependencyFields(dependency) {
            const fieldOrder = [
              'name',
              'version',
              'repository',
              'condition',
              'tags',
              'enabled',
              'import-values',
              'alias',
            ];
            // Sort the dependency fields
            const sortedDependency = {};
            for (const field of fieldOrder) {
              if (dependency.hasOwnProperty(field)) {
                sortedDependency[field] = dependency[field];
              }
            }

            return sortedDependency;
          }

          const req = rootChartFileContent.dependencies;
          const lock = dependencies;

          const hash = hashReq(req, lock);
          chartLockFileContent.digest = hash;

          const updatedChartLockFileContent = yaml.stringify(chartLockFileContent);
          core.debug(`Updated Chart.lock file content:\n${updatedChartLockFileContent}`);

          // Update Chart.lock file
          fs.writeFileSync(chartLockFile, updatedChartLockFileContent, 'utf8');

    - uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112 # v4.3.0

    - shell: bash
      run: |
        # For each line in the input, add the Helm repository
        echo "${{ inputs.helm-repositories }}" | while read -r line; do
          if [ -z "$line" ]; then
            continue
          fi

          # shellcheck disable=SC2086
          helm repo add $line
        done

    - shell: bash
      run: |
        echo "Building charts dependencies"

        CHART_ROOT_DIR="$(pwd)/${{ inputs.path }}"
        CHART_FILES=$(find "$CHART_ROOT_DIR" -name "Chart.yaml")

        # If no files found, exit
        if [ -z "$CHART_FILES" ]; then
          echo "No charts found in $CHART_ROOT_DIR"
          exit 0
        fi

        # For each chart, build dependencies
        for chart in $CHART_FILES; do
          if [ ! -f "$chart" ]; then
            continue
          fi

          CHART_DIR=$(dirname "$chart")
          echo "Building dependencies for $CHART_DIR"
          helm dependency build "$CHART_DIR"
        done

    - id: chart-releaser
      uses: appany/helm-oci-chart-releaser@dd0551c15abe174eb57824ecde62e976091094da # v0.4.2
      with:
        name: ${{ github.event.repository.name }}
        repository: ${{ github.repository }}/charts/${{ inputs.chart }}
        tag: ${{ inputs.tag }}
        path: ${{ inputs.path }}
        registry: ${{ inputs.oci-registry }}
        registry_username: ${{ inputs.oci-registry-username }}
        registry_password: ${{ inputs.oci-registry-password }}
