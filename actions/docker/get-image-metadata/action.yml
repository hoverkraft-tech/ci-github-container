name: "Get image metadata"
description: "Action to retrieve required metadata to build Docker image"
author: Hoverkraft
branding:
  icon: package
  color: gray-dark

outputs:
  image:
    description: 'Forged image name containing registry. Example: "ghcr.io/my-org/my-repo/application"'
    value: ${{ steps.generate-outputs.outputs.image }}
  labels:
    description: "The image labels."
    value: ${{ steps.generate-outputs.outputs.labels }}
  annotations:
    description: "The image annotations."
    value: ${{ steps.generate-outputs.outputs.annotations }}
  tags:
    description: 'The image tags. Example: "pr-63-5222075\npr-63"'
    value: ${{ steps.generate-outputs.outputs.tags }}

inputs:
  oci-registry:
    description: "OCI registry where to pull and push images"
    default: "ghcr.io"
    required: true
  image:
    description: "Additional Image name"
    required: false
  tag:
    description: "Force image tag to publish"
    required: false

runs:
  using: "composite"
  steps:
    # #region Prepare build variables

    - shell: bash
      # FIXME: workaround until will be merged: https://github.com/actions/runner/pull/1684
      run: mkdir -p ./self-actions/ && cp -r $GITHUB_ACTION_PATH/../../* ./self-actions/

    - id: image-name
      uses: ./self-actions/docker/get-image-name
      with:
        image: ${{ inputs.image }}
        oci-registry: ${{ inputs.oci-registry }}

    - shell: bash
      # FIXME: workaround until will be merged: https://github.com/actions/runner/pull/1684
      run: |
        rm -fr ./self-actions

    - id: get-issue-number
      if: inputs.tag == '' && (github.event_name == 'pull_request' || github.event_name == 'pull_request_review' || github.event_name == 'issue_comment')
      uses: hoverkraft-tech/ci-github-common/actions/get-issue-number@0.11.1

    - uses: hoverkraft-tech/ci-github-common/actions/checkout@0.11.1

    - id: define-metadata-inputs
      uses: actions/github-script@v7.0.1
      with:
        result-encoding: string
        script: |
          // If push on default branch set tag to latest
          const isPushOnDefaultBranch = context.eventName === 'push' && context.ref === `refs/heads/${{ github.base_ref }}`;
          core.setOutput('flavor', isPushOnDefaultBranch ? 'latest=true' : 'latest=false');

          const tagInput = `${{ inputs.tag }}`
          if (tagInput.length) {
            core.setOutput('tags',`type=semver,pattern={{raw}},value=${tagInput}`);
            return;
          }

          const isPullRequestOrIssueComment = context.eventName === 'pull_request' || context.eventName === 'pull_request_review' || context.eventName === 'issue_comment';
          if(isPullRequestOrIssueComment) {
            core.setOutput('tags',[
              `type=sha,prefix=pr-${{ steps.get-issue-number.outputs.issue-number }}-`,
              `type=ref,event=pr`,
            ].join("\n"));
            return;
          }

          const isPushOrWorkflowDispatch = context.eventName === 'push' || context.eventName === 'workflow_dispatch';
          if(isPushOrWorkflowDispatch) {
            const isTag = context.ref.startsWith('refs/tags/');
            core.setOutput('tags', isTag ? `type=ref,event=tag` : `type=ref,event=branch`);
            return;
          }

          core.setFailed(`No tags found for the current event: ${context.eventName}`);

    - id: docker-metadata
      uses: docker/metadata-action@v5.3.0
      with:
        images: ${{ steps.image-name.outputs.image-name-with-registry }}
        tags: ${{ steps.define-metadata-inputs.outputs.tags }}
        flavor: ${{ steps.define-metadata-inputs.outputs.flavor }}
      env:
        DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,manifest-descriptor

    - id: generate-outputs
      uses: actions/github-script@v7.0.1
      with:
        script: |
          const image = `${{ steps.image-name.outputs.image-name-with-registry }}`;
          core.setOutput('image', image);

          const labels = `${{ steps.docker-metadata.outputs.labels }}`;
          core.setOutput('labels', labels);

          const annotations = `${{ steps.docker-metadata.outputs.annotations }}`;
          core.setOutput('annotations', annotations);

          const tags = `${{ steps.docker-metadata.outputs.tags }}`;
          const sortedTags = tags
            .split("\n")
            .sort((a, b) => b.length - a.length)
            .join("\n");

          core.setOutput('tags', sortedTags);
