name: "Create images manifests"
description: "Action to create built images manifests"
author: Hoverkraft
branding:
  icon: package
  color: gray-dark

inputs:
  oci-registry:
    description: "OCI registry where to pull and push images"
    default: "ghcr.io"
    required: true
  oci-registry-username:
    description: "Username used to log against the OCI registry. See [https://github.com/docker/login-action#usage](https://github.com/docker/login-action#usage)"
    default: ${{ github.repository_owner }}
    required: true
  oci-registry-password:
    description: 'Password or personal access token used to log against the OCI registry. Can be passed in using "secrets.GITHUB_TOKEN". See [https://github.com/docker/login-action#usage](https://github.com/docker/login-action#usage)'
    default: ${{ github.token }}
    required: true
  built-images:
    description: 'Built images data. Example: {
      "application": {
      "name": "application",
      "image": "ghcr.io/my-org/my-repo/application",
      "digest": "sha256:1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef",
      "tags": ["ghcr.io/my-org/my-repo/application:pr-63-5222075","ghcr.io/my-org/my-repo/application:pr-63"]
      }
      }'
    required: true

runs:
  using: "composite"
  steps:
    - uses: docker/setup-buildx-action@v3
    - uses: docker/setup-qemu-action@v3

    - uses: docker/login-action@v3
      with:
        registry: ${{ inputs.oci-registry }}
        username: ${{ inputs.oci-registry-username }}
        password: ${{ inputs.oci-registry-password }}

    - name: Create SHA manifest and push
      uses: actions/github-script@v7.0.0
      with:
        script: |
          const builtImagesInput = `${{ inputs.built-images }}`;
          let builtImages = null;
          try {
            builtImages = JSON.parse(builtImagesInput);
          } catch (error) {
            throw new Error(`"built-images" input is not a valid JSON: ${error}`);
          }

          // Create manifest for each image
          const commands = Object.keys(builtImages).map(imageName => {
            const builtImage = builtImages[imageName];

            const tags = [...new Set(builtImage.tags)].map(tag => {
              return `--tag ${tag}`;
            }).join(" ");

            const image = builtImage.image;

            const digests = [...new Set(builtImage.digests)].map(digest => {
              const cleanDigest = digest.trim();
              return cleanDigest.length ? `${image}@${cleanDigest}` : "";
            }).join(" ");

            createManifestCommand = `docker buildx imagetools create ${tags} ${digests}`;

            return new Promise(async (resolve, reject)  => {
              try {
                await exec.exec(createManifestCommand);
                core.debug(`Create manifest for "${builtImage.name}" ("${createManifestCommand}") executed`);
                resolve();
              } catch(error){
                reject(error);
              }
            });
          });

          await Promise.all(commands);

          core.debug("Manifest created and pushed");
