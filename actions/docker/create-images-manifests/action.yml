name: "Create images manifests"
description: "Action to create built images manifests"
author: Hoverkraft
branding:
  icon: package
  color: gray-dark

inputs:
  oci-registry:
    description: "OCI registry where to pull and push images"
    default: "ghcr.io"
    required: true
  oci-registry-username:
    description: "Username used to log against the OCI registry. See [https://github.com/docker/login-action#usage](https://github.com/docker/login-action#usage)"
    default: ${{ github.repository_owner }}
    required: true
  oci-registry-password:
    description: 'Password or personal access token used to log against the OCI registry. Can be passed in using "secrets.GITHUB_TOKEN". See [https://github.com/docker/login-action#usage](https://github.com/docker/login-action#usage)'
    default: ${{ github.token }}
    required: true
  built-images:
    description: 'Built images data. Example: {
        "application": {
          "name": "application",
          "registry": "ghcr.io",
          "repository": "my-org/my-repo/application",
          "tags": ["pr-63-5222075","pr-63"],
          "images": [
            "ghcr.io/my-org/my-repo/application:pr-63-5222075",
            "ghcr.io/my-org/my-repo/application:pr-63"
          ],
          "digests": [
            "ghcr.io/my-org/my-repo/application@sha256:d31aa93410434ac9dcfc9179cac2cb1fd4d7c27f11527addc40299c7c675f49d",
            "ghcr.io/my-org/my-repo/application@sha256:0f5aa93410434ac9dcfc9179cac2cb1fd4d7c27f11527addc40299c7c675f402"
          ],
          "annotations": {
            "org.opencontainers.image.created": "2021-09-30T14:00:00Z",
            "org.opencontainers.image.description": "Application image"
          }
        }
      }'
    required: true

runs:
  using: "composite"
  steps:
    - uses: docker/setup-buildx-action@v3
      with:
        version: latest

    - uses: docker/setup-qemu-action@v3

    - uses: docker/login-action@v3
      with:
        registry: ${{ inputs.oci-registry }}
        username: ${{ inputs.oci-registry-username }}
        password: ${{ inputs.oci-registry-password }}

    - name: Create SHA manifest and push
      uses: actions/github-script@v7.0.1
      with:
        script: |
          const builtImagesInput = `${{ inputs.built-images }}`;
          let builtImages = null;
          try {
            builtImages = JSON.parse(builtImagesInput);
          } catch (error) {
            throw new Error(`"built-images" input is not a valid JSON: ${error}`);
          }

          // Create manifest for each image
          const commands = Object.keys(builtImages).map(imageName => {
            const builtImage = builtImages[imageName];

            const tags = builtImage.images.map(image => {
              return `--tag ${image}`;
            }).join(" ");

            const digests = builtImage.digests.join(" ");

            const annotationLevels = ["index"];
            const annotations = Object.keys(builtImage.annotations)
              .map(annotation => annotationLevels
                .map(annotationLevel => `--annotation "${annotationLevel}:${annotation}=${builtImage.annotations[annotation]}"`)
              )
              .flat().join(" ");

            createManifestCommand = `docker buildx imagetools create ${annotations} ${tags} ${digests}`;

            return new Promise(async (resolve, reject)  => {
              try {
                await exec.exec(createManifestCommand);
                core.debug(`Create manifest for "${builtImage.name}" ("${createManifestCommand}") executed`);
                resolve();
              } catch(error){
                reject(error);
              }
            });
          });

          await Promise.all(commands);

          core.debug("Manifest created and pushed");
