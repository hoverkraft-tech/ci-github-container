---
name: "Docker - Sign images"
description: |
  Action to sign OCI images.
  It is based on [cosign](https://github.com/sigstore/cosign).
  It signs the images with the GitHub Actions OIDC token.
  If the provided image does not have a digest, it will retrieve the digest using `docker buildx imagetools inspect`.

author: hoverkraft
branding:
  icon: award
  color: blue

inputs:
  images:
    description: |
      Images to sign.
      Can be a single image or a list of images separated by commas or newlines or spaces.
      The images should be in the format `registry/name:tag@digest`.
      It can also be a list of images in JSON format.
      Example:
      ```
        [
          "ghcr.io/my-org/my-repo/application:pr-63-5222075@sha256:d31aa93410434ac9dcfc9179cac2cb1fd4d7c27f11527addc40299c7c675f49d",
          "ghcr.io/my-org/my-repo/application:pr-63@sha256:0f5aa93410434ac9dcfc9179cac2cb1fd4d7c27f11527addc40299c7c675f402"
        ]
      ```
      If the image does not have a digest, it will retrieve the digest using `docker buildx imagetools inspect`.
    required: true
  github-token:
    description: |
      GitHub Token to sign the image.
      Permissions:
        - id-token: write
    default: ${{ github.token }}

runs:
  using: "composite"
  steps:
    - uses: sigstore/cosign-installer@398d4b0eeef1380460a10c8013a76f728fb906ac # v3.9.1

    - name: Sign the images with GitHub OIDC Token
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const imagesInput = ${{ toJson(inputs.images) }};
          let images = null;
          try {
            // Try to parse the input as JSON
            images = JSON.parse(imagesInput);
          } catch (error) {
            // If it fails, split the input by commas, newlines or spaces
            images = imagesInput.split(/[\s,]+/).filter(image => image.trim() !== "");
          }

          if (!Array.isArray(images) || images.length === 0) {
            return core.setFailed(`"images" input is not a valid JSON array or a non-empty string: ${images}`);
          }

          // Ensure images are in the correct format
          const imageRegex = /^[a-zA-Z0-9._-]+(?:\.[a-zA-Z0-9._-]+)*(?::[0-9]+)?\/(?:[a-z0-9._\/-]+):[a-zA-Z0-9._-]+@sha256:[a-f0-9]{64}$/;

          for(const image of images) {
            if (typeof image !== 'string'){
              return core.setFailed(`Invalid image format: ${image}. Expected a string.`);
            }

            if (!imageRegex.test(image)) {
              return core.setFailed(`Invalid image format: ${image}. Expected format: registry/name:tag@digest`);
            }
          }

          // Create manifest for each image
          const signImageCommand = `cosign sign --recursive --yes ${images.join(" ")}`;

          core.debug(`Signing images with command: "${signImageCommand}"`);
          await exec.exec(signImageCommand);
          core.debug("All images signed successfully");
