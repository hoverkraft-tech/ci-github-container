---
name: "Build image"
description: "Action to build an image with Docker for a specific platform"
author: Hoverkraft
branding:
  icon: package
  color: gray-dark

outputs:
  built-image:
    description: |
      Built image data.
      Example: {
        "name": "application",
        "registry": "ghcr.io",
        "repository": "my-org/my-repo/application",
        "tags": [
          "pr-63-5222075",
          "pr-63"
        ],
        "images": [
          "ghcr.io/my-org/my-repo/application:pr-63-5222075",
          "ghcr.io/my-org/my-repo/application:pr-63"
        ],
        "digests": [
          "ghcr.io/my-org/my-repo/application@sha256:d31aa93410434ac9dcfc9179cac2cb1fd4d7c27f11527addc40299c7c675f49d"
        ],
        "annotations": {
          "org.opencontainers.image.created": "2021-09-30T14:00:00Z",
          "org.opencontainers.image.description": "Application image"
        }
      }
    value: ${{ steps.get-built-image.outputs.built-image }}

inputs:
  oci-registry:
    description: "OCI registry where to pull and push images"
    default: "ghcr.io"
    required: true
  oci-registry-username:
    description: |
      Username used to log against the OCI registry.
      See <https://github.com/docker/login-action#usage>.
    default: ${{ github.repository_owner }}
    required: true
  oci-registry-password:
    description: |
      Password or personal access token used to log against the OCI registry.
      Can be passed in using "secrets.GITHUB_TOKEN".
      See <https://github.com/docker/login-action#usage>.
    default: ${{ github.token }}
    required: true
  repository:
    description: |
      Repository name.
      Example: 'my-org/my-repo'.
      See [Docker get-image-metadata action](../get-image-metadata/README.md).
    default: ${{ github.repository }}
    required: false
  image:
    description: |
      Additional image name.
      Example: 'application'.
      See [Docker get-image-metadata action](../get-image-metadata/README.md).
    required: false
  tag:
    description: "Force image tag to publish"
    required: false
  platform:
    description: |
      Platform to build for.
      See <https://github.com/docker/build-push-action#inputs>.
    required: true
  context:
    description: |
      Build's context is the set of files located in the specified PATH or URL.
      See <https://github.com/docker/build-push-action#inputs>.
    default: "."
    required: false
  dockerfile:
    description: |
      Location of Dockerfile (defaults to Dockerfile).
      See <https://github.com/docker/build-push-action#inputs>.
    default: "Dockerfile"
    required: false
  build-args:
    description: |
      List of build-time variables.
      See <https://github.com/docker/build-push-action#inputs>.
    required: false
  target:
    description: |
      Sets the target stage to build.
      See <https://github.com/docker/build-push-action#inputs>.
    required: false
  secrets:
    description: |
      List of secrets to expose to the build.
      See <https://docs.docker.com/build/ci/github-actions/secrets/>.
    required: false

runs:
  using: "composite"
  steps:
    # #region Prepare build variables

    - shell: bash
      # FIXME: workaround until will be merged: https://github.com/actions/runner/pull/1684
      run: mkdir -p ./self-actions/ && cp -r $GITHUB_ACTION_PATH/../../* ./self-actions/

    - id: metadata
      uses: ./self-actions/docker/get-image-metadata
      with:
        oci-registry: ${{ inputs.oci-registry }}
        repository: ${{ inputs.repository }}
        image: ${{ inputs.image }}
        tag: ${{ inputs.tag }}

    - shell: bash
      # FIXME: workaround until will be merged: https://github.com/actions/runner/pull/1684
      run: |
        rm -fr ./self-actions

    - id: slugify-platform
      uses: hoverkraft-tech/ci-github-common/actions/slugify@0.17.0
      with:
        value: ${{ inputs.platform }}

    - id: get-docker-config
      shell: bash
      run: |
        TAG_SUFFIX="-${{ steps.slugify-platform.outputs.result }}"

        # Add tag suffix flavor
        CACHE_FLAVOR="suffix=$TAG_SUFFIX"

        echo "cache-flavor=$CACHE_FLAVOR" >> "$GITHUB_OUTPUT"

        # Check if docker exists
        if command -v docker &> /dev/null; then
          echo "docker-exists=true" >> "$GITHUB_OUTPUT"
        fi

        PLATFORM="${{ inputs.platform }}"
        if [ -z "$PLATFORM" ]; then
          echo "platform-exists=true" >> "$GITHUB_OUTPUT"
        else
          PLATFORM_OS=$(echo "$PLATFORM" | cut -d'/' -f1)
          RUNNER_OS=$(uname -s | tr '[:upper:]' '[:lower:]')

          echo "::debug::PLATFORM_OS=$PLATFORM_OS"
          echo "::debug::RUNNER_OS=$RUNNER_OS"

          if [ "$PLATFORM_OS" = "$RUNNER_OS" ]; then
            PLATFORM_ARCH=$(echo "$PLATFORM" | cut -d'/' -f2-)
            RUNNER_ARCH=$(uname -m)

            echo "::debug::PLATFORM_ARCH=$PLATFORM_ARCH"
            echo "::debug::RUNNER_ARCH=$RUNNER_ARCH"

            # Convert runner arch to docker arch
            case $RUNNER_ARCH in
              x86_64)
                RUNNER_ARCH="amd64"
                ;;
              aarch64)
                RUNNER_ARCH="arm64"
                ;;
              armv7l)
                RUNNER_ARCH="arm/v7"
                ;;
              *)
                echo "::warning::Unsupported architecture: $RUNNER_ARCH"
                ;;
            esac

            if [ "$PLATFORM_ARCH" = "$RUNNER_ARCH" ]; then
              echo "platform-exists=true" >> "$GITHUB_OUTPUT"
            fi
          fi
        fi

    - id: cache
      uses: int128/docker-build-cache-config-action@v1.37.0
      with:
        image: ${{ steps.metadata.outputs.image }}/cache
        flavor: ${{ steps.get-docker-config.outputs.cache-flavor }}
        pull-request-cache: true
        cache-type: gha

    - uses: hoverkraft-tech/ci-github-common/actions/checkout@0.17.0
      with:
        lfs: true

    - shell: bash
      run: git lfs pull

    - if: steps.get-docker-config.outputs.docker-exists != 'true'
      uses: docker/setup-docker-action@v4

    - if: steps.get-docker-config.outputs.platform-exists != 'true'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: ${{ inputs.platform }}

    - uses: docker/setup-buildx-action@v3
      with:
        # FIXME: upgrade version when available (https://github.com/docker/buildx/releases)
        version: v0.20.1
        # FIXME: upgrade version when available (https://hub.docker.com/r/moby/buildkit)
        driver-opts: |
          image=moby/buildkit:v0.19.0

    - uses: docker/login-action@v3
      with:
        registry: ${{ inputs.oci-registry }}
        username: ${{ inputs.oci-registry-username }}
        password: ${{ inputs.oci-registry-password }}

    - id: build
      uses: docker/build-push-action@v6
      with:
        context: ${{ inputs.context }}
        build-args: ${{ inputs.build-args }}
        target: ${{ inputs.target }}
        file: ${{ github.workspace }}/${{ inputs.context }}/${{ inputs.dockerfile }}
        secrets: ${{ inputs.secrets }}
        platforms: ${{ inputs.platform }}
        cache-from: ${{ steps.cache.outputs.cache-from }}
        cache-to: ${{ steps.cache.outputs.cache-to }}
        outputs: "type=image,push=true,push-by-digest=true,name-canonical=true,name=${{ steps.metadata.outputs.image }}"
        labels: ${{ steps.metadata.outputs.labels }}
        annotations: ${{ steps.metadata.outputs.annotations }}

    - id: get-built-image
      uses: actions/github-script@v7.0.1
      with:
        script: |
          const builtMetadata = ${{ steps.build.outputs.metadata }};
          if (typeof builtMetadata !== 'object') {
            core.setFailed('Given "metadata" output is not a JSON object.');
            return;
          }

          if (builtMetadata["containerimage.digest"] === undefined) {
            core.setFailed('Given "metadata"."containerimage.digest" output is undefined.');
            return;
          }

          const name = `${{ inputs.image }}`;
          const image = `${{ steps.metadata.outputs.image }}`;
          const registryMatch = image.match(/^([^\/]+)\/.*/);
          const registry = registryMatch ? registryMatch[1] : null;
          const repositoryMatch = image.match(/^[^\/]+\/([^:]+)/);
          const repository = repositoryMatch ? repositoryMatch[1] : null;

          const tags = `${{ steps.metadata.outputs.tags }}`
          .split("\n")
          .map(tag => tag.replace(/[^\/]+\/[^:]+:(.+)/,'$1').trim())
          .filter(tag => tag !== "");

          const images = tags.map(tag => `${image}:${tag}`);
          const digests = builtMetadata["containerimage.digest"]
            .split(",")
            .map(digest => {
              const cleanedDigest = digest.trim();
              return cleanedDigest !== "" ? `${image}@${cleanedDigest}` : null;
            })
            .filter(digest => digest !== null);

          const annotations = `${{ steps.metadata.outputs.annotations }}`
            .split("\n")
            .map(annotation => {
              const cleanedAnnotation = annotation
                .replace(/^[^:]+:/, "")
                .trim();
              return cleanedAnnotation !== "" ? cleanedAnnotation : null;
            })
            .filter(annotation => annotation !== null)
            .reduce((annotations, annotation) => {
              const [key, value] = annotation.split("=");
              annotations[key] = value;
              return annotations;
            }, {})

          const builtImage = {
            name,
            tags,
            annotations,
            registry,
            repository,
            images,
            digests,
          };

          core.setOutput("built-image", JSON.stringify(builtImage));
