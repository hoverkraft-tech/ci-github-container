---
name: "Docker - Build image"
description: |
  Action to build and push a "raw" image with Docker for a specific platform.
  This action uses the Docker Buildx plugin to build the image.
  It supports caching.
  It returns the image digest URI, tags, and annotations, but does not handle it itself.
author: hoverkraft
branding:
  icon: package
  color: blue

outputs:
  built-image:
    description: |
      Built image data.
      Example:
      ```json
      {
        "name": "application",
        "registry": "ghcr.io",
        "repository": "my-org/my-repo/application",
        "digest": "sha256:d31aa93410434ac9dcfc9179cac2cb1fd4d7c27f11527addc40299c7c675f49d",
        "image": "ghcr.io/my-org/my-repo/application@sha256:d31aa93410434ac9dcfc9179cac2cb1fd4d7c27f11527addc40299c7c675f49d",
        "tags": [
          "pr-63-5222075",
          "pr-63"
        ],
        "annotations": {
          "org.opencontainers.image.created": "2021-09-30T14:00:00Z",
          "org.opencontainers.image.description": "Application image"
        }
      }
      ```
    value: ${{ steps.get-built-image.outputs.built-image }}

inputs:
  oci-registry:
    description: "OCI registry where to pull and push images"
    default: "ghcr.io"
    required: true
  oci-registry-username:
    description: |
      Username used to log against the OCI registry.
      See https://github.com/docker/login-action#usage.
    default: ${{ github.repository_owner }}
    required: true
  oci-registry-password:
    description: |
      Password or personal access token used to log against the OCI registry.
      Can be passed in using `secrets.GITHUB_TOKEN`.
      See https://github.com/docker/login-action#usage.
    default: ${{ github.token }}
    required: true
  repository:
    description: |
      Repository name.
      Example: `my-org/my-repo`.
      See [Docker get-image-metadata action](../get-image-metadata/README.md).
    default: ${{ github.repository }}
    required: false
  image:
    description: |
      Additional image name.
      Example: `application`.
      See [Docker get-image-metadata action](../get-image-metadata/README.md).
    required: false
  tag:
    description: "Force image tag to publish"
    required: false
  platform:
    description: |
      Platform to build for.
      See https://github.com/docker/build-push-action#inputs.
    required: true
  context:
    description: |
      Build's context is the set of files located in the specified PATH or URL.
      See https://github.com/docker/build-push-action#inputs.
    default: "."
    required: false
  dockerfile:
    description: |
      Location of Dockerfile (defaults to Dockerfile).
      See https://github.com/docker/build-push-action#inputs.
    default: "Dockerfile"
    required: false
  build-args:
    description: |
      List of build-time variables.
      See https://github.com/docker/build-push-action#inputs.
    required: false
  target:
    description: |
      Sets the target stage to build.
      See https://github.com/docker/build-push-action#inputs.
    required: false
  secrets:
    description: |
      List of secrets to expose to the build.
      See https://docs.docker.com/build/ci/github-actions/secrets/.
    required: false
  secret-envs:
    description: |
      List of secret environment variables to expose to the build (e.g., `key=envname, MY_SECRET=MY_ENV_VAR`).
      See https://docs.docker.com/build/ci/github-actions/secrets/.
    required: false
  cache-type:
    description: |
      Cache type.
      See https://docs.docker.com/build/cache/backends.
    default: "gha"
    required: false

runs:
  using: "composite"
  steps:
    # #region Prepare build variables

    - shell: bash
      # FIXME: workaround until will be merged: https://github.com/actions/runner/pull/1684
      run: mkdir -p ./self-actions/ && cp -r $GITHUB_ACTION_PATH/../../* ./self-actions/

    - id: metadata
      uses: ./self-actions/docker/get-image-metadata
      with:
        oci-registry: ${{ inputs.oci-registry }}
        repository: ${{ inputs.repository }}
        image: ${{ inputs.image }}
        tag: ${{ inputs.tag }}

    - shell: bash
      # FIXME: workaround until will be merged: https://github.com/actions/runner/pull/1684
      run: |
        rm -fr ./self-actions

    - id: slugify-platform
      uses: hoverkraft-tech/ci-github-common/actions/slugify@b7dd413209df265bef8d7eb0efb117eaabc684c4 # 0.27.0
      with:
        value: ${{ inputs.platform }}

    - id: get-docker-config
      shell: bash
      run: |
        TAG_SUFFIX="-${{ steps.slugify-platform.outputs.result }}"

        # Add tag suffix flavor
        CACHE_FLAVOR="suffix=$TAG_SUFFIX"

        echo "cache-flavor=$CACHE_FLAVOR" >> "$GITHUB_OUTPUT"

        # Define cache image
        CACHE_TYPE="${{ inputs.cache-type }}"
        if [ "$CACHE_TYPE" = "registry" ]; then
          echo "cache-image=${{ steps.metadata.outputs.image }}/cache" >> "$GITHUB_OUTPUT"
        else
          echo "cache-image=${{ steps.metadata.outputs.image }}" >> "$GITHUB_OUTPUT"
        fi

        # Check if docker exists
        if command -v docker &> /dev/null; then
          echo "docker-exists=true" >> "$GITHUB_OUTPUT"
        fi

        PLATFORM="${{ inputs.platform }}"
        if [ -z "$PLATFORM" ]; then
          echo "platform-exists=true" >> "$GITHUB_OUTPUT"
        else
          PLATFORM_OS=$(echo "$PLATFORM" | cut -d'/' -f1)
          RUNNER_OS=$(uname -s | tr '[:upper:]' '[:lower:]')

          echo "::debug::PLATFORM_OS=$PLATFORM_OS"
          echo "::debug::RUNNER_OS=$RUNNER_OS"

          if [ "$PLATFORM_OS" = "$RUNNER_OS" ]; then
            PLATFORM_ARCH=$(echo "$PLATFORM" | cut -d'/' -f2-)
            RUNNER_ARCH=$(uname -m)

            echo "::debug::PLATFORM_ARCH=$PLATFORM_ARCH"
            echo "::debug::RUNNER_ARCH=$RUNNER_ARCH"

            # Convert runner arch to docker arch
            case $RUNNER_ARCH in
              x86_64)
                RUNNER_ARCH="amd64"
                ;;
              aarch64)
                RUNNER_ARCH="arm64"
                ;;
              armv7l)
                RUNNER_ARCH="arm/v7"
                ;;
              *)
                echo "::warning::Unsupported architecture: $RUNNER_ARCH"
                ;;
            esac

            if [ "$PLATFORM_ARCH" = "$RUNNER_ARCH" ]; then
              echo "platform-exists=true" >> "$GITHUB_OUTPUT"
            fi
          fi
        fi

    - id: cache
      uses: int128/docker-build-cache-config-action@b3744816a5ba1ad9885b634d530b35ca90ece622 # v1.39.0
      with:
        image: ${{ steps.get-docker-config.outputs.cache-image }}
        flavor: ${{ steps.get-docker-config.outputs.cache-flavor }}
        pull-request-cache: true
        cache-type: ${{ inputs.cache-type }}
        extra-cache-to: "image-manifest=true,oci-mediatypes=true"

    # FIXME: Remove this when https://github.com/int128/docker-build-cache-config-action/pull/1213 is merged
    - id: transform-cache-gha
      if: inputs.cache-type == 'gha'
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      with:
        script: |
          const cacheFrom = `${{ steps.cache.outputs.cache-from }}`;
          const cacheTo = `${{ steps.cache.outputs.cache-to }}`;

          core.info(`Original cache-from: ${cacheFrom}`);
          core.info(`Original cache-to: ${cacheTo}`);

          // Transform cache-from: replace ref= with scope=
          const transformedCacheFrom = cacheFrom.replace(/ref=/g, 'scope=');

          // Transform cache-to: replace ref= with scope=
          const transformedCacheTo = cacheTo.replace(/ref=/g, 'scope=');

          core.info(`Transformed cache-from: ${transformedCacheFrom}`);
          core.info(`Transformed cache-to: ${transformedCacheTo}`);

          core.setOutput('cache-from', transformedCacheFrom);
          core.setOutput('cache-to', transformedCacheTo);

    - if: steps.get-docker-config.outputs.docker-exists != 'true'
      uses: docker/setup-docker-action@3fb92d6d9c634363128c8cce4bc3b2826526370a # v4.4.0

    - if: steps.get-docker-config.outputs.platform-exists != 'true'
      uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
      with:
        platforms: ${{ inputs.platform }}

    - uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      with:
        # FIXME: upgrade version when available (https://github.com/docker/buildx/releases)
        version: v0.27.0
        # FIXME: upgrade version when available (https://hub.docker.com/r/moby/buildkit)
        driver-opts: |
          image=moby/buildkit:v0.23.2

    - uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
      with:
        registry: ${{ inputs.oci-registry }}
        username: ${{ inputs.oci-registry-username }}
        password: ${{ inputs.oci-registry-password }}

    - id: build
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
      with:
        context: ${{ inputs.context }}
        build-args: ${{ inputs.build-args }}
        target: ${{ inputs.target }}
        file: ${{ github.workspace }}/${{ inputs.context }}/${{ inputs.dockerfile }}
        secrets: ${{ inputs.secrets }}
        secret-envs: ${{ inputs.secret-envs }}
        platforms: ${{ inputs.platform }}
        # FIXME: Remove 'inputs.cache-type == 'gha' && steps.transform-cache-gha.outputs.cache-from ||'
        # when https://github.com/int128/docker-build-cache-config-action/pull/1213 is merged
        cache-from: ${{ inputs.cache-type == 'gha' && steps.transform-cache-gha.outputs.cache-from || steps.cache.outputs.cache-from }}
        # FIXME: Remove 'inputs.cache-type == 'gha' && steps.transform-cache-gha.outputs.cache-to ||'
        # when https://github.com/int128/docker-build-cache-config-action/pull/1213 is merged
        cache-to: ${{ inputs.cache-type == 'gha' && steps.transform-cache-gha.outputs.cache-to || steps.cache.outputs.cache-to }}
        outputs: "type=image,push=true,push-by-digest=true,name-canonical=true,name=${{ steps.metadata.outputs.image }}"
        labels: ${{ steps.metadata.outputs.labels }}
        annotations: ${{ steps.metadata.outputs.annotations }}

    - id: get-built-image
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      with:
        script: |
          const builtMetadata = ${{ steps.build.outputs.metadata }};
          if (typeof builtMetadata !== 'object') {
            core.setFailed('Given "metadata" output is not a JSON object.');
            return;
          }

          if (builtMetadata["containerimage.digest"] === undefined) {
            return core.setFailed('Given "metadata"."containerimage.digest" output is undefined.');
          }

          const name = `${{ inputs.image }}`;
          const image = `${{ steps.metadata.outputs.image }}`;
          const registryMatch = image.match(/^([^\/]+)\/.*/);
          const registry = registryMatch ? registryMatch[1] : null;
          const repositoryMatch = image.match(/^[^\/]+\/([^:]+)/);
          const repository = repositoryMatch ? repositoryMatch[1] : null;

          const tags = `${{ steps.metadata.outputs.tags }}`
          .split("\n")
          .map(tag => tag.replace(/[^\/]+\/[^:]+:(.+)/,'$1').trim())
          .filter(tag => tag !== "");

          const digests = builtMetadata["containerimage.digest"]
            .split(",")
            .map(digest => {
              const cleanedDigest = digest.trim();
              return cleanedDigest !== "" ? cleanedDigest : null;
            })
            .filter(digest => digest !== null);

          const uniqueDigests = [...new Set(digests)];
          if (uniqueDigests.length === 0) {
            return core.setFailed('No valid digests found in "containerimage.digest" output.');
          }

          if( uniqueDigests.length > 1 ) {
            return core.setFailed(`Multiple digests found: ${uniqueDigests.join(", ")}.`);
          }

          const digest = uniqueDigests[0];
          const imageWithDigest = `${image}@${digest}`;

          const annotations = `${{ steps.metadata.outputs.annotations }}`
            .split("\n")
            .map(annotation => {
              const cleanedAnnotation = annotation
                .replace(/^[^:]+:/, "")
                .trim();
              return cleanedAnnotation !== "" ? cleanedAnnotation : null;
            })
            .filter(annotation => annotation !== null)
            .reduce((annotations, annotation) => {
              const [key, value] = annotation.split("=");
              annotations[key] = value;
              return annotations;
            }, {})

          const builtImage = {
            name,
            tags,
            annotations,
            registry,
            repository,
            image: imageWithDigest,
            digest
          };

          core.setOutput("built-image", JSON.stringify(builtImage));
