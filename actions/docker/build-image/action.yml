name: "Build image"
description: "Action to build an image with Docker for a specific platform"
author: Hoverkraft
branding:
  icon: package
  color: gray-dark

outputs:
  built-image:
    description: 'Built image data. Example: {
      "name": "application",
      "registry": "ghcr.io",
      "repository": "my-org/my-repo/application",
      "tags": ["pr-63-5222075","pr-63"],
      "images": ["ghcr.io/my-org/my-repo/application:pr-63-5222075","ghcr.io/my-org/my-repo/application:pr-63"],
      "digests": ["ghcr.io/my-org/my-repo/application@sha256:d31aa93410434ac9dcfc9179cac2cb1fd4d7c27f11527addc40299c7c675f49d"],
      "annotations": [
        "org.opencontainers.image.created=2021-09-30T14:00:00Z",
        "org.opencontainers.image.description=Application image"
      ]
    }'
    value: ${{ steps.get-built-image.outputs.built-image }}

inputs:
  oci-registry:
    description: "OCI registry where to pull and push images"
    default: "ghcr.io"
    required: true
  oci-registry-username:
    description: "Username used to log against the OCI registry. See [https://github.com/docker/login-action#usage](https://github.com/docker/login-action#usage)"
    default: ${{ github.repository_owner }}
    required: true
  oci-registry-password:
    description: 'Password or personal access token used to log against the OCI registry. Can be passed in using "secrets.GITHUB_TOKEN". See [https://github.com/docker/login-action#usage](https://github.com/docker/login-action#usage)'
    default: ${{ github.token }}
    required: true
  image:
    description: "Additional Image name"
    required: false
  tag:
    description: "Force image tag to publish"
    required: false
  platform:
    description: "Platform to build for. See [https://github.com/docker/build-push-action#inputs](https://github.com/docker/build-push-action#inputs)"
    required: true
  context:
    description: "Build's context is the set of files located in the specified PATH or URL. See [https://github.com/docker/build-push-action#inputs](https://github.com/docker/build-push-action#inputs)"
    default: "."
    required: false
  dockerfile:
    description: "Location of Dockerfile (defaults to Dockerfile). See [https://github.com/docker/build-push-action#inputs](https://github.com/docker/build-push-action#inputs)"
    default: "Dockerfile"
    required: false
  build-args:
    description: "List of build-time variables. See [https://github.com/docker/build-push-action#inputs](https://github.com/docker/build-push-action#inputs)"
    required: false
  target:
    description: "Sets the target stage to build. See [https://github.com/docker/build-push-action#inputs](https://github.com/docker/build-push-action#inputs)"
    required: false
  secrets:
    description: "List of secrets to expose to the build. See [https://docs.docker.com/build/ci/github-actions/secrets/](https://docs.docker.com/build/ci/github-actions/secrets/)"
    required: false

runs:
  using: "composite"
  steps:
    - shell: bash
      # FIXME: workaround until will be merged: https://github.com/actions/runner/pull/1684
      run: mkdir -p ./self-build-image-action/ && cp -r $GITHUB_ACTION_PATH/../../* ./self-build-image-action/

    - id: metadata
      uses: ./self-build-image-action/docker/get-image-metadata
      with:
        oci-registry: ${{ inputs.oci-registry }}
        image: ${{ inputs.image }}
        tag: ${{ inputs.tag }}
        platform: ${{ inputs.platform }}
        levels: manifest,manifest-descriptor

    - id: built-image-metadata
      uses: ./self-build-image-action/docker/get-image-metadata
      with:
        oci-registry: ${{ inputs.oci-registry }}
        image: ${{ inputs.image }}
        tag: ${{ inputs.tag }}

    - shell: bash
      # FIXME: workaround until will be merged: https://github.com/actions/runner/pull/1684
      run: |
        rm -fr ./self-build-image-action

    - id: cache
      uses: int128/docker-build-cache-config-action@v1.28.0
      with:
        image: ${{ steps.metadata.outputs.image }}/cache
        flavor: ${{ steps.metadata.outputs.flavor }}
        pull-request-cache: true

    - uses: hoverkraft-tech/ci-github-common/actions/checkout@0.11.2
      with:
        lfs: true

    - shell: bash
      run: git lfs pull

    - uses: docker/setup-qemu-action@v3
      with:
        platforms: ${{ inputs.platform }}

    - uses: docker/setup-buildx-action@v3
      with:
        version: latest

    - uses: docker/login-action@v3
      with:
        registry: ${{ inputs.oci-registry }}
        username: ${{ inputs.oci-registry-username }}
        password: ${{ inputs.oci-registry-password }}

    - id: build
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.context }}
        build-args: ${{ inputs.build-args }}
        target: ${{ inputs.target }}
        file: ${{ github.workspace }}/${{ inputs.context }}/${{ inputs.dockerfile }}
        secrets: ${{ inputs.secrets }}
        platforms: ${{ inputs.platform }}
        cache-from: ${{ steps.cache.outputs.cache-from }}
        cache-to: ${{ steps.cache.outputs.cache-to }}
        outputs: "type=image,push=true"
        labels: ${{ steps.metadata.outputs.labels }}
        annotations: ${{ steps.metadata.outputs.annotations }}
        tags: ${{ steps.metadata.outputs.tags }}

    - id: get-built-image
      uses: actions/github-script@v7.0.1
      with:
        script: |
          const builtMetadata = ${{ steps.build.outputs.metadata }};
          if (typeof builtMetadata !== 'object') {
            core.setFailed('Given "metadata" output is not a JSON object.');
            return;
          }

          if (builtMetadata["containerimage.digest"] === undefined) {
            core.setFailed('Given "metadata"."containerimage.digest" output is undefined.');
            return;
          }

          const name = `${{ inputs.image }}`;
          const image = `${{ steps.built-image-metadata.outputs.image }}`;
          const registryMatch = image.match(/^([^\/]+)\/.*/);
          const registry = registryMatch ? registryMatch[1] : null;
          const repositoryMatch = image.match(/^[^\/]+\/([^:]+)/);
          const repository = repositoryMatch ? repositoryMatch[1] : null;

          const tags = `${{ steps.built-image-metadata.outputs.tags }}`
          .split("\n")
          .map(tag => tag.replace(/[^\/]+\/[^:]+:(.+)/,'$1').trim())
          .filter(tag => tag !== "");

          const images = tags.map(tag => `${image}:${tag}`);

          const digests = builtMetadata["containerimage.digest"]
            .split(",")
            .map(digest => {
              const cleanedDigest = digest.trim();
              return cleanedDigest !== "" ? `${image}@${cleanedDigest}` : null;
            })
            .filter(digest => digest !== null);

          const annotations = `${{ steps.built-image-metadata.outputs.annotations }}`
            .split("\n")
            .map(annotation => annotation.trim())
            .filter(annotation => annotation !== "");

          const builtImage = {
            name,
            tags,
            annotations,
            registry,
            repository,
            images,
            digests,
          };

          core.setOutput("built-image", JSON.stringify(builtImage));

    - shell: bash
      if: always()
      # FIXME: workaround until will be merged: https://github.com/actions/runner/pull/1684
      run: mkdir -p ./self-build-image-action/ && cp -r $GITHUB_ACTION_PATH/../../* ./self-build-image-action/
