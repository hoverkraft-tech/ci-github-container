name: "Build image"
description: "Action to build an image with Docker for a specific platform"
author: Hoverkraft
branding:
  icon: package
  color: gray-dark

outputs:
  image:
    description: 'Name of the built image. Example: "ghcr.io/my-org/my-repo/application"'
    value: ${{ steps.get-built-image.outputs.image }}
  digest:
    description: 'Digest of the built image. Example: "sha256:1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"'
    value: ${{ steps.get-built-image.outputs.digest }}

inputs:
  oci-registry:
    description: "OCI registry where to pull and push images"
    default: "ghcr.io"
    required: true
  oci-registry-username:
    description: "Username used to log against the OCI registry. See [https://github.com/docker/login-action#usage](https://github.com/docker/login-action#usage)"
    default: ${{ github.repository_owner }}
    required: true
  oci-registry-password:
    description: 'Password or personal access token used to log against the OCI registry. Can be passed in using "secrets.GITHUB_TOKEN". See [https://github.com/docker/login-action#usage](https://github.com/docker/login-action#usage)'
    default: ${{ github.token }}
    required: true
  image:
    description: 'Image name. Example: "ghcr.io/my-org/my-repo/application"'
    required: true
  platform:
    description: "Platform to build for. See [https://github.com/docker/build-push-action#inputs](https://github.com/docker/build-push-action#inputs)"
    required: true
  context:
    description: "Build's context is the set of files located in the specified PATH or URL. See [https://github.com/docker/build-push-action#inputs](https://github.com/docker/build-push-action#inputs)"
    default: "."
    required: false
  dockerfile:
    description: "Location of Dockerfile (defaults to Dockerfile). See [https://github.com/docker/build-push-action#inputs](https://github.com/docker/build-push-action#inputs)"
    default: "Dockerfile"
    required: false
  build-args:
    description: "List of build-time variables. See [https://github.com/docker/build-push-action#inputs](https://github.com/docker/build-push-action#inputs)"
    required: false
  target:
    description: "Sets the target stage to build. See [https://github.com/docker/build-push-action#inputs](https://github.com/docker/build-push-action#inputs)"
    required: false
  labels:
    description: "Labels to apply to the built image. See [https://github.com/docker/build-push-action#inputs](https://github.com/docker/build-push-action#inputs)"
    required: false
  secrets:
    description: "List of secrets to expose to the build. See [https://docs.docker.com/build/ci/github-actions/secrets/](https://docs.docker.com/build/ci/github-actions/secrets/)"
    required: false

runs:
  using: "composite"
  steps:
    # #region Prepare build variables

    - shell: bash
      # FIXME: workaround until will be merged: https://github.com/actions/runner/pull/1684
      run: mkdir -p ./self-actions/ && cp -r $GITHUB_ACTION_PATH/../../* ./self-actions/

    - shell: bash
      # FIXME: workaround until will be merged: https://github.com/actions/runner/pull/1684
      run: |
        rm -fr ./self-actions

    - id: slugify-platform
      uses: hoverkraft-tech/ci-github-common/actions/slugify@0.10.0
      with:
        value: ${{ inputs.platform }}

    - id: get-cache-flavor
      shell: bash
      run: |
        TAG_SUFFIX="-${{ steps.slugify-platform.outputs.result }}"

        # Add tag suffix flavor
        FLAVOR="suffix=$TAG_SUFFIX"

        echo "flavor=$FLAVOR" >> $GITHUB_OUTPUT

    - id: cache
      uses: neilime/docker-build-cache-config-action@feat/handle-pull-request-base-branch
      with:
        image: ${{ inputs.image }}/cache
        flavor: ${{ steps.get-cache-flavor.outputs.flavor }}
        pull-request-cache: true

    - uses: hoverkraft-tech/ci-github-common/actions/checkout@0.10.0
      with:
        lfs: true

    - shell: bash
      run: git lfs pull

    - id: docker-metadata
      uses: docker/metadata-action@v5.0.0
      with:
        images: ${{ inputs.image }}

    - uses: docker/setup-qemu-action@v3
    - uses: docker/setup-buildx-action@v3

    - uses: docker/login-action@v3
      with:
        registry: ${{ inputs.oci-registry }}
        username: ${{ inputs.oci-registry-username }}
        password: ${{ inputs.oci-registry-password }}

    - id: build
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.context }}
        build-args: ${{ inputs.build-args }}
        target: ${{ inputs.target }}
        file: ${{ github.workspace }}/${{ inputs.context }}/${{ inputs.dockerfile }}
        labels: ${{ inputs.labels }}
        platforms: ${{ inputs.platform }}
        cache-from: ${{ steps.cache.outputs.cache-from }}
        cache-to: ${{ steps.cache.outputs.cache-to }}
        outputs: type=image,name=${{ inputs.image }},push-by-digest=true,name-canonical=true,push=true
        secrets: ${{ inputs.secrets }}

    - id: get-built-image
      uses: actions/github-script@v6.4.1
      with:
        script: |
          const builtMetadata = ${{ steps.build.outputs.metadata }};

          if (typeof builtMetadata !== 'object') {
            core.setFailed('Given "metadata" output is not a JSON object.');
            return;
          }

          if (builtMetadata["image.name"] === undefined) {
            core.setFailed('Given "metadata"."image.name" output is undefined.');
            return;
          }
          if (builtMetadata["containerimage.digest"] === undefined) {
            core.setFailed('Given "metadata"."containerimage.digest" output is undefined.');
            return;
          }

          core.setOutput('image', builtMetadata["image.name"]);
          core.setOutput('digest', builtMetadata["containerimage.digest"]);
