---
name: "Docker - Clean images"
description: |
  Action to clean up container images from GitHub Container Registry (ghcr.io).
  This is a wrapper around the ghcr-cleanup-action that provides a consistent interface
  for image cleanup operations including deleting untagged images, pruning old tags,
  and managing image lifecycle.
author: hoverkraft
branding:
  icon: trash-2
  color: blue

inputs:
  package:
    description: |
      Comma-separated list of packages to cleanup.
      Example: "application-1,application-2"
    required: true
  tags:
    description: |
      Comma-separated list of tags to delete (supports wildcard syntax).
      Example: `pr-*,dev`
    required: true
  github-token:
    description: |
      GitHub token with the packages:write and packages:delete scopes.
      See https://docs.github.com/en/packages/learn-github-packages/about-permissions-for-github-packages#about-scopes-and-permissions-for-package-registries.
    default: ${{ github.token }}

runs:
  using: "composite"
  steps:
    - id: prepare
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      env:
        PACKAGE: ${{ inputs.package }}
      with:
        script: |
          // Prepare package names by trimming whitespace
          let packages = process.env.PACKAGE.split(',').map(pkg => pkg.trim());

          let owner = null;
          let repository = null;

          packages = packages.map(pkg => {
            const parts = pkg.split('/');
            let packageName = pkg;
            if (parts.length > 2) {
              // Format: owner/repo/package
              if (owner === null) {
                owner = parts[0];
              } else if (owner !== parts[0]) {
                throw new Error(`Inconsistent owners found in package names: ${owner} and ${parts[0]}`);
              }
              if (repository === null) {
                repository = parts[1];
              } else if (repository !== parts[1]) {
                throw new Error(`Inconsistent repositories found in package names: ${repository} and ${parts[1]}`);
              }
              packageName = parts.slice(2).join('/');
            } else if (parts.length === 2) {
              // Format: repo/package
              if (repository === null) {
                repository = parts[0];
              } else if (repository !== parts[0]) {
                throw new Error(`Inconsistent repositories found in package names: ${repository} and ${parts[0]}`);
              }
              packageName = parts[1];
            }
            return `${repository}/${packageName}`;
          });

          if (!owner) {
            return core.setFailed('Owner could not be determined from package names or environment variables.');
          }
          core.setOutput('owner', owner || process.env.GITHUB_REPOSITORY_OWNER);

          if (!repository) {
            return core.setFailed('Repository could not be determined from package names or environment variables.');
          }
          core.setOutput('repository', repository || process.env.GITHUB_REPOSITORY.split('/')[1]);

          if (!packages.length) {
            return core.setFailed('No valid package names provided.');
          }
          core.setOutput('packages', packages.join(','));

    - id: cleanup
      uses: dataaxiom/ghcr-cleanup-action@cd0cdb900b5dbf3a6f2cc869f0dbb0b8211f50c4 # v1.0.16
      with:
        owner: ${{ steps.prepare.outputs.owner }}
        repository: ${{ steps.prepare.outputs.repository }}
        token: ${{ inputs.github-token }}
        package: ${{ steps.prepare.outputs.packages }}
        tags: ${{ inputs.tags }}
        delete-ghost-images: true
        delete-orphaned-images: true
        validate: true
