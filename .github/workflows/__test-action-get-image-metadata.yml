---
name: Test for "docker/get-image-metadata" action
run-name: Test for "docker/get-image-metadata" action

on: # yamllint disable-line rule:truthy
  workflow_call:

permissions:
  contents: read

jobs:
  tests:
    name: Test for "docker/get-image-metadata" action
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Act
        id: get-image-metadata
        uses: ./actions/docker/get-image-metadata
        with:
          oci-registry: ghcr.io
          image: application-test

      - name: Assert - Check get image metadata ouputs
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          script: |
            const assert = require("assert");

            const imageOutput = `${{ steps.get-image-metadata.outputs.image }}`;
            assert(imageOutput.length, `"image" output is empty`);
            assert.equal(imageOutput,"ghcr.io/hoverkraft-tech/ci-github-container/application-test", `"image" output is not valid`);

            const labelsOutput = `${{ steps.get-image-metadata.outputs.labels }}`;
            assert(labelsOutput.length, `"labels" output is empty`);
            assert(
              labelsOutput.startsWith("org.opencontainers.image.created"),
              `"labels" "org.opencontainers.image.created" output is not valid`
            );

            const expectedLabels = "org.opencontainers.image.source=https://github.com/hoverkraft-tech/ci-github-container\n" +
                "org.opencontainers.image.title=ci-github-container\n" +
                "org.opencontainers.image.url=https://github.com/hoverkraft-tech/ci-github-container\n";

            assert(
              labelsOutput.includes(expectedLabels),
              `"labels" output is not valid`
            );

            const annotationsOutput = `${{ steps.get-image-metadata.outputs.annotations }}`;
            assert(annotationsOutput.length, `"annotations" output is empty`);

            const expectedManifestAnnotations = expectedLabels.split("\n").map(line => {
              if (line.length === 0) return line;
              return `manifest:${line}`;
            }).join("\n");

            assert(
              annotationsOutput.includes(expectedManifestAnnotations),
              `"annotations - manifest" output is not valid`
            );

            const expectedManifestDescriptorAnnotations = expectedLabels.split("\n").map(line => {
              if (line.length === 0) return line;
              return `manifest-descriptor:${line}`;
            }).join("\n");

            assert(
              annotationsOutput.includes(expectedManifestDescriptorAnnotations),
              `"annotations - manifest-descriptor" output is not valid`
            );

            const tagsOutput = `${{ steps.get-image-metadata.outputs.tags }}`;
            assert(tagsOutput.length, `"tags" output is empty`);

            const tags = tagsOutput.split("\n").filter(Boolean);
            assert(tags.length, `"tags" output is empty`);

            if (`${{ github.event_name }}` === "pull_request") {
              assert.equal(
                tags.length,
                2,
                `"tags" output must contain 2 tags for pull_request event`
              );

              assert(
                tags[0].startsWith("ghcr.io/hoverkraft-tech/ci-github-container/application-test:pr-${{ github.event.pull_request.number }}-"),
                `"tags" output is not valid`
              );

              assert.equal(
                tags[1],
                "ghcr.io/hoverkraft-tech/ci-github-container/application-test:pr-${{ github.event.pull_request.number }}", `"tags" output is not valid`
              );
            } else {
              assert.equal(
                tags.length,
                2,
                `"tags" output must contain 2 tags for push event`
              );

              assert.equal(tags[0],"ghcr.io/hoverkraft-tech/ci-github-container/application-test:main", `"tags" output is not valid`);
              assert.equal(tags[1],"ghcr.io/hoverkraft-tech/ci-github-container/application-test:latest", `"tags" output is not valid`);
            }

  tests-with-given-tag:
    name: Test for "docker/get-image-metadata" action with given tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Act
        id: get-image-metadata
        uses: ./actions/docker/get-image-metadata
        with:
          oci-registry: ghcr.io
          image: application-test
          tag: 1.0.0

      - name: Assert - Check get image metadata ouputs
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          script: |
            const assert = require("assert");

            const tagsOutput = `${{ steps.get-image-metadata.outputs.tags }}`;
            assert(tagsOutput.length, `"tags" output is empty`);
            assert.equal(
              tagsOutput,
              "ghcr.io/hoverkraft-tech/ci-github-container/application-test:1.0.0"
            );
