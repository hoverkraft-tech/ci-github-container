# Docker build images
# ==========================
# Workflow to build multiple docker images.
# Build images using [Docker build image](https://github.com/hoverkraft-tech/ci-github-container/blob/main/actions/docker/build-image/README.md)
# This includes [multi-platform](https://docs.docker.com/build/building/multi-platform/) build

name: Docker build images

on:
  workflow_call:
    outputs:
      built-images:
        description: 'Built images names and tags. Example: {
          "application": {
          "name": "application",
          "registry": "ghcr.io",
          "repository": "my-org/my-repo/application",
          "tags": ["pr-63", "pr-63-5222075"],
          "images": ["ghcr.io/my-org/my-repo/application:pr-63","ghcr.io/my-org/my-repo/application:pr-63-5222075"]
          }
          }'
        value: ${{ jobs.outputs-built-images.outputs.built-images }}
    inputs:
      oci-registry:
        description: "OCI registry where to pull and push images"
        type: string
        required: true
      oci-registry-username:
        description: "Username used to log against the OCI registry. See https://github.com/docker/login-action#usage"
        required: false
        type: string
        default: ${{ github.repository_owner }}
      images:
        description: 'Images to build parameters. Example: [{
          "name": "application",
          "context": ".",
          "dockerfile": "./docker/application/Dockerfile",
          "build-args": { "APP_PATH": "./application/", "PROD_MODE": "true" },
          "target": "prod",
          "platforms": ["linux/amd64","linux/arm64","linux/arm/v7"]
          }]'
        type: string
        required: true
    secrets:
      oci-registry-password:
        description: 'Password or personal access token used to log against the OCI registry. Can be passed in using "secrets.GITHUB_TOKEN". See https://github.com/docker/login-action#usage'
        required: false

jobs:
  prepare-variables:
    outputs:
      images: ${{ steps.validate-inputs.outputs.images }}
    runs-on: "ubuntu-latest"
    steps:
      - id: validate-inputs
        uses: actions/github-script@v6.4.0
        with:
          script: |
            const imagesInput = `${{ inputs.images }}`;

            // Check if is valid Json
            let images = null;
            try {
              images = JSON.parse(imagesInput);
            } catch (error) {
              throw new Error(`"images" input is not a valid JSON: ${error}`);
            }

            // Check if is an array
            if (!Array.isArray(images)) {
              throw new Error(`"images" input is not an array`);
            }

            // Check each item
            const imagesByPlatform = [];
            for (const key in images) {
              const image = images[key];
              if (typeof image !== 'object') {
                throw new Error(`"images[${key}]" input is not an object`);
              }

              // Check mandatory properties
              for (const property of ['name', 'platforms']) {
                if (!image.hasOwnProperty(property)) {
                  throw new Error(`"images[${key}].${property}" input is missing`);
                }
              }

              // Format build-args object to string
              if(image['build-args']){
                const buildArgs = Object.keys(image['build-args']).map(key => `${key}=${image['build-args'][key]}`).join('\n');
                image['build-args'] = buildArgs;
              }

              // Add image for each platform
              for (const platform of image['platforms']) {
                const imageByPlatform = {
                  ...image,
                  platform: platform
                };
                imagesByPlatform.push(imageByPlatform);
              }
            }

            core.setOutput('images', JSON.stringify(imagesByPlatform));

  build-images:
    name: Build images
    needs: prepare-variables
    runs-on: "ubuntu-latest"
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.prepare-variables.outputs.images) }}
    steps:
      - id: build
        uses: hoverkraft-tech/ci-github-container/actions/docker/build-image@main
        with:
          oci-registry: ${{ inputs.oci-registry }}
          oci-registry-username: ${{ inputs.oci-registry-username }}
          oci-registry-password: ${{ secrets.oci-registry-password }}
          tag: ${{ matrix.image.tag }}
          image: ${{ matrix.image.name }}
          context: ${{ matrix.image.context }}
          dockerfile: ${{ matrix.image.dockerfile }}
          build-args: ${{ matrix.image.build-args }}
          target: ${{ matrix.image.target }}
          platform: ${{ matrix.image.platform }}

      - id: outputs-built-image
        uses: actions/github-script@v6.4.0
        with:
          script: |
            const builtImage = {
              "name": "${{ matrix.image.name }}",
              "images": ${{ steps.build.outputs.images }},
              "tagSuffix": "${{ steps.build.outputs.tag-suffix }}",
              "platform": "${{ matrix.image.platform }}"
            };
            core.setOutput("built-image", JSON.stringify(builtImage));

      # FIXME: Set built images infos in file to be uploaded as artifacts, because github action does not handle job outputs for matrix
      # https://github.com/orgs/community/discussions/26639
      - uses: hoverkraft-tech/ci-github-common/actions/set-matrix-output@0.3.4
        with:
          artifact-name: "built-images"
          value: ${{ steps.outputs-built-image.outputs.built-image }}

  outputs-built-images:
    needs: build-images
    runs-on: "ubuntu-latest"
    outputs:
      built-images: ${{ steps.generate-outputs.outputs.built-images }}
    steps:
      - id: get-matrix-outputs
        uses: hoverkraft-tech/ci-github-common/actions/get-matrix-outputs@0.3.4
        with:
          artifact-name: "built-images"

      - id: generate-outputs
        uses: actions/github-script@v6.4.0
        with:
          script: |
            const registry = `${{ inputs.oci-registry }}`;
            const images = ${{ inputs.images }};
            const allBuiltImages = ${{ steps.get-matrix-outputs.outputs.result }};

            const builtImages = {};
            images.forEach(({ name, platforms }) => {
              // Get built images for current image
              const platformBuiltImages = allBuiltImages.filter(({ name: builtImageName }) => builtImageName === name);
              if (!platformBuiltImages.length) {
                throw new Error(`No built image found for image "${name}"`);
              }

              const firstPlatform = platforms[0];
              const firstPlatformImage = platformBuiltImages.find(({ platform }) => platform === firstPlatform);
              if (!firstPlatformImage) {
                throw new Error(`No built image found for platform "${firstPlatform}"`);
              }

              // Get generic images
              const taxSuffixMatcher = new RegExp(firstPlatformImage.tagSuffix+'$')
              const genericImages = firstPlatformImage.images.map(image => image.replace(taxSuffixMatcher, ''));

              const repository = genericImages[0].replace(/[^\/]+\/([^:]+):.+/,'$1');
              const tags = genericImages.map(tag => tag.replace(/[^\/]+\/[^:]+:(.+)/,'$1'));

              const builtImage = {
                name,
                registry,
                repository,
                tags,
                images: genericImages,
                platforms: platformBuiltImages,
              };

              builtImages[name] = builtImage;
            });

            core.setOutput('built-images', JSON.stringify(builtImages));

      - uses: docker/setup-qemu-action@v2

      - uses: docker/login-action@v2
        with:
          registry: ${{ inputs.oci-registry }}
          username: ${{ inputs.oci-registry-username }}
          password: ${{ secrets.oci-registry-password }}

      - name: Create SHA manifest and push
        uses: actions/github-script@v6.4.0
        with:
          script: |
            const builtImages = ${{ steps.generate-outputs.outputs.built-images }};

            const createAndPushCommands = [];
            for (const builtImage of Object.values(builtImages)) {
              const createAndPushCommandsForImage = builtImage.images.map((image, key) => {
                const manifestsToAmmend = builtImage.platforms.map(({ images }) => `--amend ${images[key]}`);

                const createManifestCommand = `docker manifest create ${image} ${manifestsToAmmend.join(' ')}`;
                const pushManifestCommand = `docker manifest push ${image}`;

                return new Promise(async (resolve, reject)  => {
                  try {
                    await exec.exec(createManifestCommand);
                    core.debug(`Create manifest for "${builtImage.name}" ("${createManifestCommand}") executed`);
                    await exec.exec(pushManifestCommand);
                    core.debug(`Push manifest for "${builtImage.name}" ("${pushManifestCommand}") executed`);
                    resolve();
                  } catch(error){
                    reject(error);
                  }
                });
              });

              createAndPushCommands.push(...createAndPushCommandsForImage);
            }

            await Promise.all(createAndPushCommands);
            core.debug("All manifests created and pushed");
