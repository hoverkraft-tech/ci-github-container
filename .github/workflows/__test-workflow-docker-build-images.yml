name: Test for "docker-build-images" workflow
run-name: Test for "docker-build-images" workflow

on:
  workflow_call:

jobs:
  arrange:
    runs-on: ubuntu-latest
    steps:
      - run: |
          if [ -z "${{ secrets.GITHUB_TOKEN }}" ]; then
            echo "GitHub token secrets is not set"
            exit 1
          fi
  act:
    needs: arrange
    uses: ./.github/workflows/docker-build-images.yml
    secrets:
      oci-registry-password: ${{ secrets.GITHUB_TOKEN }}
    with:
      images: |
        [
          {
            "name": "application-1",
            "context": ".",
            "dockerfile": "./tests/application-1/Dockerfile",
            "build-args": { "PROD_MODE": "true" },
            "target": "prod",
            "platforms": ["linux/amd64","linux/arm64","linux/arm/v7"]
          },
          {
            "name": "application-2",
            "context": ".",
            "dockerfile": "./tests/application-2/Dockerfile",
            "build-args": { "PROD_MODE": "true" },
            "target": "prod",
            "platforms": ["linux/amd64"]
          }
        ]

  assert:
    needs: act
    runs-on: "ubuntu-latest"
    steps:
      - name: Check built images ouput
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const assert = require("assert");

            const builtImagesOutput = `${{ needs.act.outputs.built-images }}`;
            assert(builtImagesOutput.length, `"built-images" output is empty`);

            // Check if is valid Json
            let builtImages = null;
            try {
              builtImages = JSON.parse(builtImagesOutput);
            } catch (error) {
              throw new Error(`"built-images" output is not a valid JSON: ${error}`);
            }

            assert(typeof builtImages === "object" && !Array.isArray(builtImages), `"built-images" output is not an object`);
            assert.equal(Object.keys(builtImages).length, 2, `"built-images" output does not contain 2 images`);

            assert(builtImages["application-1"], `"built-images" output does not contain "application-1" image`);

            const application1Image = builtImages["application-1"];
            assert.equal(application1Image.name, "application-1");
            assert.equal(application1Image.registry, "ghcr.io");
            assert.equal(application1Image.repository,"hoverkraft-tech/ci-github-container/application-1");
            assert(application1Image.tags.length);
            assert(application1Image.images.length);
            application1Image.images.forEach(image => assert.match(image, /^ghcr\.io\/hoverkraft-tech\/ci-github-container\/application-1:[\.a-z0-9-]+$/));

            const application2Image = builtImages["application-2"];
            assert.equal(application2Image.name, "application-2");
            assert.equal(application2Image.registry, "ghcr.io");
            assert.equal(application2Image.repository,"hoverkraft-tech/ci-github-container/application-2");
            assert(application2Image.tags.length);
            assert(application2Image.images.length);
            application2Image.images.forEach(image => assert.match(image, /^ghcr\.io\/hoverkraft-tech\/ci-github-container\/application-2:[\.a-z0-9-]+$/));

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Check multi-arch docker image and manifest
        run: |
          IMAGE="${{ fromJson(needs.act.outputs.built-images).application-1.images[0] }}"

          docker pull "$IMAGE"

          if ! MANIFEST=$(docker manifest inspect "$IMAGE"); then
            echo "Failed to inspect manifest for image: ${IMAGE}"
            exit 1
          fi

          # Check that there are 3 platforms
          PLATFORMS=$(echo "${MANIFEST}" | jq -e '[.manifests[].platform]')
          NB_PLATFORMS=$(echo "${PLATFORMS}" | jq -e '. | length')
          if [ "$NB_PLATFORMS" != "3" ]; then
            echo "Expected 3 platforms, got: $NB_PLATFORMS"
            echo "${MANIFEST}"
            exit 1
          fi

          # Check if all platforms are valid

          ## os=linux,architecture=amd64,variant=null
          PLATFORM_EXISTS=$(echo "${PLATFORMS}" | jq -e 'any(.architecture == "amd64" and .os == "linux" and .variant == null)')
          test "$PLATFORM_EXISTS" = "true"

          ## os=linux,architecture=arm64,variant=null
          PLATFORM_EXISTS=$(echo "${PLATFORMS}" | jq -e 'any(.architecture == "arm64" and .os == "linux" and .variant == null)')
          test "$PLATFORM_EXISTS" = "true"

          ## os=linux,architecture=arm,variant=v7
          PLATFORM_EXISTS=$(echo "${PLATFORMS}" | jq -e 'any(.architecture == "arm" and .os == "linux" and .variant == "v7")')
          test "$PLATFORM_EXISTS" = "true"

      - name: Check single-arch docker image
        run: |
          IMAGE="${{ fromJson(needs.act.outputs.built-images).application-2.images[0] }}"

          docker pull "$IMAGE"

          if ! MANIFEST=$(docker manifest inspect "$IMAGE"); then
            echo "Failed to inspect manifest for image: ${IMAGE}"
            echo "${MANIFEST}"
            exit 1
          fi

          # Check that there is only platforms
          PLATFORMS=$(echo "${MANIFEST}" | jq -e '[.manifests[].platform]')
          NB_PLATFORMS=$(echo "${PLATFORMS}" | jq -e '. | length')
          if [ "$NB_PLATFORMS" != "1" ]; then
            echo "Expected 1 platform, got: $NB_PLATFORMS"
            echo "${MANIFEST}"
            exit 1
          fi

          # Check if platform is valid

          ## os=linux,architecture=amd64,variant=null
          PLATFORM_EXISTS=$(echo "${PLATFORMS}" | jq -e 'any(.architecture == "amd64" and .os == "linux" and .variant == null)')
          test "$PLATFORM_EXISTS" = "true"

  cleanup:
    needs: assert
    runs-on: "ubuntu-latest"
    permissions:
      packages: write
    if: always()
    steps:
      - uses: actions/checkout@v4

      - id: get-issue-number
        if: ${{ github.event_name == 'pull_request' }}
        uses: hoverkraft-tech/ci-github-common/actions/get-issue-number@0.10.1

      - name: Cleanup application-1 images
        if: ${{ github.event_name == 'pull_request' }}
        uses: ./actions/docker/delete-image-tags
        with:
          image: "application-1"
          tag-prefix: "${{ steps.get-issue-number.outputs.issue-number }}-"

      - name: Cleanup application-2 images
        if: ${{ github.event_name == 'pull_request' }}
        uses: ./actions/docker/delete-image-tags
        with:
          image: "application-2"
          tag-prefix: "${{ steps.get-issue-number.outputs.issue-number }}-"
