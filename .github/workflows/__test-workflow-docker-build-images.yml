name: Test for "docker-build-images" workflow
run-name: Test for "docker-build-images" workflow

on:
  workflow_call:

# jscpd:ignore-start
jobs:
  arrange:
    runs-on: ubuntu-latest
    steps:
      - run: |
          if [ -z "${{ secrets.GITHUB_TOKEN }}" ]; then
            echo "GitHub token secrets is not set"
            exit 1
          fi
  act:
    needs: arrange
    uses: ./.github/workflows/docker-build-images.yml
    secrets:
      oci-registry-password: ${{ secrets.GITHUB_TOKEN }}
    with:
      images: |
        [
          {
            "name": "application-multi-arch",
            "context": ".",
            "dockerfile": "./tests/application/Dockerfile",
            "build-args": { "PROD_MODE": "true" },
            "target": "prod",
            "platforms": ["linux/amd64","linux/arm64","linux/arm/v7"]
          },
          {
            "name": "application-mono-arch",
            "context": ".",
            "dockerfile": "./tests/application/Dockerfile",
            "build-args": { "PROD_MODE": "true" },
            "target": "prod",
            "platforms": ["linux/amd64"],
            "tag": "0.1.0"
          }
        ]

  assert:
    needs: act
    runs-on: "ubuntu-latest"
    steps:
      - name: Check built images ouput
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const assert = require("assert");

            const builtImagesOutput = `${{ needs.act.outputs.built-images }}`;
            assert(builtImagesOutput.length, `"built-images" output is empty`);

            // Check if is valid Json
            let builtImages = null;
            try {
              builtImages = JSON.parse(builtImagesOutput);
            } catch (error) {
              throw new Error(`"built-images" output is not a valid JSON: ${error}`);
            }

            assert(typeof builtImages === "object" && !Array.isArray(builtImages), `"built-images" output is not an object`);
            assert.equal(Object.keys(builtImages).length, 2, `"built-images" output does not contain 2 images`);

            assert(builtImages["application-multi-arch"], `"built-images" output does not contain "application-multi-arch" image`);

            const applicationMultiArchImage = builtImages["application-multi-arch"];
            assert.equal(applicationMultiArchImage.name, "application-multi-arch");
            assert.equal(applicationMultiArchImage.registry, "ghcr.io");
            assert.equal(applicationMultiArchImage.repository,"hoverkraft-tech/ci-github-container/application-multi-arch");
            assert(applicationMultiArchImage.tags.length);
            assert(applicationMultiArchImage.images.length);
            applicationMultiArchImage.images.forEach(image => assert.match(image, /^ghcr\.io\/hoverkraft-tech\/ci-github-container\/application-multi-arch:[\.a-z0-9-]+$/));

            const applicationMonoArchImage = builtImages["application-mono-arch"];
            assert.equal(applicationMonoArchImage.name, "application-mono-arch");
            assert.equal(applicationMonoArchImage.registry, "ghcr.io");
            assert.equal(applicationMonoArchImage.repository,"hoverkraft-tech/ci-github-container/application-mono-arch");
            assert.equal(applicationMonoArchImage.tags.length, 1);
            assert.equal(applicationMonoArchImage.images.length, 1);
            assert.equal(applicationMonoArchImage.images[0], "ghcr.io/hoverkraft-tech/ci-github-container/application-mono-arch:0.1.0");

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Check multi-arch docker image and manifest
        run: |
          IMAGE="${{ fromJson(needs.act.outputs.built-images).application-multi-arch.images[0] }}"

          docker pull "$IMAGE"

          if ! MANIFEST=$(docker manifest inspect "$IMAGE"); then
            echo "Failed to inspect manifest for image: ${IMAGE}"
            exit 1
          fi

          # Check that there are 3 platforms
          if ! PLATFORMS=$(echo "${MANIFEST}" | jq -e '[.manifests[].platform]'); then
            echo "Failed to get platforms for image: ${IMAGE}"
            echo "${MANIFEST}"
            exit 1
          fi

          NB_PLATFORMS=$(echo "${PLATFORMS}" | jq -e '. | length')
          if [ "$NB_PLATFORMS" != "3" ]; then
            echo "Expected 3 platforms, got: $NB_PLATFORMS"
            echo "${MANIFEST}"
            exit 1
          fi

          # Check if all platforms are valid

          ## os=linux,architecture=amd64,variant=null
          PLATFORM_EXISTS=$(echo "${PLATFORMS}" | jq -e 'any(.architecture == "amd64" and .os == "linux" and .variant == null)')
          test "$PLATFORM_EXISTS" = "true" || (echo "Expected platform not found: os=linux,architecture=amd64,variant=null" && echo "$PLATFORMS" && exit 1)

          ## os=linux,architecture=arm64,variant=null
          PLATFORM_EXISTS=$(echo "${PLATFORMS}" | jq -e 'any(.architecture == "arm64" and .os == "linux" and .variant == null)')
          test "$PLATFORM_EXISTS" = "true" || (echo "Expected platform not found: os=linux,architecture=arm64,variant=null" && echo "$PLATFORMS" && exit 1)

          ## os=linux,architecture=arm,variant=v7
          PLATFORM_EXISTS=$(echo "${PLATFORMS}" | jq -e 'any(.architecture == "arm" and .os == "linux" and .variant == "v7")')
          test "$PLATFORM_EXISTS" = "true" || (echo "Expected platform not found: os=linux,architecture=arm,variant=v7" && echo "$PLATFORMS" && exit 1)

          # FIXME: workaround to get manifest annotations
          if ! MANIFEST=$(docker buildx imagetools inspect --raw "$IMAGE"); then
            echo "Failed to inspect manifest for image: ${IMAGE}"
            exit 1
          fi

          # Check annotations
          if ! ANNOTATIONS=$(echo "${MANIFEST}" | jq -e '.annotations'); then
            echo "Failed to get annotations for image: ${IMAGE}"
            echo "${MANIFEST}"
            exit 1
          fi

          # Check expected annotations

          ## org.opencontainers.image.source
          ANNOTATION_EXISTS=$(echo "${ANNOTATIONS}" | jq -e '.["org.opencontainers.image.source"] == "https://github.com/hoverkraft-tech/ci-github-container"')
          test "$ANNOTATION_EXISTS" = "true" || (echo "Expected annotation not found: org.opencontainers.image.source" && echo "$ANNOTATIONS" && exit 1)

          ## org.opencontainers.image.title
          ANNOTATION_EXISTS=$(echo "${ANNOTATIONS}" | jq -e '.["org.opencontainers.image.title"] == "ci-github-container"')
          test "$ANNOTATION_EXISTS" = "true" || (echo "Expected annotation not found: org.opencontainers.image.title" && echo "$ANNOTATIONS" && exit 1)

          ## org.opencontainers.image.url
          ANNOTATION_EXISTS=$(echo "${ANNOTATIONS}" | jq -e '.["org.opencontainers.image.url"] == "https://github.com/hoverkraft-tech/ci-github-container"')
          test "$ANNOTATION_EXISTS" = "true" || (echo "Expected annotation not found: org.opencontainers.image.url" && echo "$ANNOTATIONS" && exit 1)

      - name: Check mono-arch docker image
        run: |
          IMAGE="${{ fromJson(needs.act.outputs.built-images).application-mono-arch.images[0] }}"

          docker pull "$IMAGE"

          if ! MANIFEST=$(docker manifest inspect "$IMAGE"); then
            echo "Failed to inspect manifest for image: ${IMAGE}"
            echo "${MANIFEST}"
            exit 1
          fi

          # Check that there is only platforms
          if ! PLATFORMS=$(echo "${MANIFEST}" | jq -e '[.manifests[].platform]'); then
            echo "Failed to get platforms for image: ${IMAGE}"
            echo "${MANIFEST}"
            exit 1
          fi

          NB_PLATFORMS=$(echo "${PLATFORMS}" | jq -e '. | length')
          if [ "$NB_PLATFORMS" != "1" ]; then
            echo "Expected 1 platform, got: $NB_PLATFORMS"
            echo "${MANIFEST}"
            exit 1
          fi

          # Check if platform is valid

          ## os=linux,architecture=amd64,variant=null
          PLATFORM_EXISTS=$(echo "${PLATFORMS}" | jq -e 'any(.architecture == "amd64" and .os == "linux" and .variant == null)')
          test "$PLATFORM_EXISTS" = "true"

# jscpd:ignore-end