---
name: Test for "docker-build-images" workflow
run-name: Test for "docker-build-images" workflow

on: # yamllint disable-line rule:truthy
  workflow_call:

permissions:
  contents: read
  issues: read
  packages: write
  pull-requests: read
  id-token: write

# jscpd:ignore-start
jobs:
  arrange:
    name: Arrange
    runs-on: ubuntu-latest
    outputs:
      image-name-prefix: ${{ steps.define-image-name-prefix.outputs.prefix }}
    steps:
      - run: |
          if [ -z "${{ secrets.GITHUB_TOKEN }}" ]; then
            echo "GitHub token secret is not set"
            exit 1
          fi

      - id: define-image-name-prefix
        run: |
          # Create unique image name prefix for parallel runs
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            PREFIX="test-pr-${{ github.event.pull_request.number }}-${{ github.run_number }}"
          else
            PREFIX="test-${{ github.ref_name }}-${{ github.run_number }}"
          fi
          # Replace / with - for branch names
          PREFIX=$(echo "$PREFIX" | sed 's/\//-/g')
          echo "prefix=$PREFIX" >> "$GITHUB_OUTPUT"
          echo "Using image name prefix: $PREFIX"

  act-build-images:
    name: Act - Build images (${{ matrix.arch-type }}, ${{ matrix.sign && 'signed' || 'unsigned' }})
    needs: arrange
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch-type: mono-arch
            image-name-suffix: mono-arch-signed
            platforms: '["linux/amd64"]'
            platform-count: 1
            sign: true
            expected-tagged-versions: 2
            expected-untagged-versions: 2
            expected-total-versions: 4
          - arch-type: multi-arch
            image-name-suffix: multi-arch-signed
            platforms: '["linux/amd64","linux/arm64"]'
            platform-count: 2
            sign: true
            expected-tagged-versions: 2
            expected-untagged-versions: 3
            expected-total-versions: 5
          - arch-type: mono-arch
            image-name-suffix: mono-arch-unsigned
            platforms: '["linux/amd64"]'
            platform-count: 1
            sign: false
            expected-tagged-versions: 1
            expected-untagged-versions: 1
            expected-total-versions: 2
          - arch-type: multi-arch
            image-name-suffix: multi-arch-unsigned
            platforms: '["linux/amd64","linux/arm64"]'
            platform-count: 2
            sign: false
            expected-tagged-versions: 1
            expected-untagged-versions: 2
            expected-total-versions: 3
    uses: ./.github/workflows/docker-build-images.yml
    secrets:
      oci-registry-password: ${{ secrets.GITHUB_TOKEN }}
      build-secret-github-app-key: ${{ secrets.CI_BOT_APP_PRIVATE_KEY }}
    with:
      sign: ${{ matrix.sign }}
      images: |
        [
          {
            "name": "${{ needs.arrange.outputs.image-name-prefix }}-${{ matrix.image-name-suffix }}",
            "context": ".",
            "dockerfile": "./tests/application/Dockerfile",
            "build-args": { "BUILD_RUN_ID": "${{ github.run_id }}" },
            "target": "base",
            "platforms": ${{ matrix.platforms }},
            "tag": "0.1.0"
          }
        ]

  assert-images:
    name: Assert - Images (${{ matrix.arch-type }}, ${{ matrix.sign && 'signed' || 'unsigned' }})
    needs: [arrange, act-build-images]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch-type: mono-arch
            image-name-suffix: mono-arch-signed
            platform-count: 1
            platforms: '["linux/amd64"]'
            sign: true
            expected-tagged-versions: 2
            expected-untagged-versions: 2
            expected-total-versions: 4
          - arch-type: multi-arch
            image-name-suffix: multi-arch-signed
            platform-count: 2
            platforms: '["linux/amd64","linux/arm64"]'
            sign: true
            expected-tagged-versions: 2
            expected-untagged-versions: 3
            expected-total-versions: 5
          - arch-type: mono-arch
            image-name-suffix: mono-arch-unsigned
            platform-count: 1
            platforms: '["linux/amd64"]'
            sign: false
            expected-tagged-versions: 1
            expected-untagged-versions: 1
            expected-total-versions: 2
          - arch-type: multi-arch
            image-name-suffix: multi-arch-unsigned
            platform-count: 2
            platforms: '["linux/amd64","linux/arm64"]'
            sign: false
            expected-tagged-versions: 1
            expected-untagged-versions: 2
            expected-total-versions: 3
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Verify image exists
        env:
          IMAGE_NAME: ${{ needs.arrange.outputs.image-name-prefix }}-${{ matrix.image-name-suffix }}
          IMAGE_TAG: 0.1.0
        run: |
          docker pull ghcr.io/hoverkraft-tech/ci-github-container/"${IMAGE_NAME}":"${IMAGE_TAG}"

      - name: Verify package has correct number of versions
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IMAGE_NAME: ${{ needs.arrange.outputs.image-name-prefix }}-${{ matrix.image-name-suffix }}
          EXPECTED_TOTAL_VERSIONS: ${{ matrix.expected-total-versions }}
          EXPECTED_TAGGED_VERSIONS: ${{ matrix.expected-tagged-versions }}
          EXPECTED_UNTAGGED_VERSIONS: ${{ matrix.expected-untagged-versions }}
        run: |
          # Get all versions
          versions=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /orgs/${{ github.repository_owner }}/packages/container/ci-github-container%2F"${IMAGE_NAME}"/versions)

          total_count=$(echo "$versions" | jq '. | length')
          tagged_count=$(echo "$versions" | jq '[.[] | select(.metadata.container.tags | length > 0)] | length')
          untagged_count=$(echo "$versions" | jq '[.[] | select(.metadata.container.tags | length == 0)] | length')

          echo "Found $total_count total versions ($tagged_count tagged, $untagged_count untagged)"
          echo "Expected $EXPECTED_TOTAL_VERSIONS total versions ($EXPECTED_TAGGED_VERSIONS tagged, $EXPECTED_UNTAGGED_VERSIONS untagged)"

          if [ "$total_count" -ne "$EXPECTED_TOTAL_VERSIONS" ]; then
            echo "ERROR: Expected $EXPECTED_TOTAL_VERSIONS total versions, but found $total_count"
            exit 1
          fi

          if [ "$tagged_count" -ne "$EXPECTED_TAGGED_VERSIONS" ]; then
            echo "ERROR: Expected $EXPECTED_TAGGED_VERSIONS tagged versions, but found $tagged_count"
            exit 1
          fi

          if [ "$untagged_count" -ne "$EXPECTED_UNTAGGED_VERSIONS" ]; then
            echo "ERROR: Expected $EXPECTED_UNTAGGED_VERSIONS untagged versions, but found $untagged_count"
            exit 1
          fi

          echo "âœ“ Package version counts are correct"

      - name: Verify image manifest and platforms
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        env:
          IMAGE_NAME: ${{ needs.arrange.outputs.image-name-prefix }}-${{ matrix.image-name-suffix }}
          IMAGE_TAG: "0.1.0"
          EXPECTED_PLATFORMS: ${{ matrix.platforms }}
          EXPECTED_PLATFORM_COUNT: ${{ matrix.platform-count }}
        with:
          script: |
            const assert = require("assert");
            const imageName = process.env.IMAGE_NAME;
            const imageTag = process.env.IMAGE_TAG;
            const image = `ghcr.io/hoverkraft-tech/ci-github-container/${imageName}:${imageTag}`;

            const { exitCode, stdout, stderr } = await exec.getExecOutput('docker', ['manifest', 'inspect', '-v', image]);

            if (exitCode !== 0 || stderr) {
              throw new Error(`Failed to inspect manifest for image: ${image}: ${stderr || stdout}`);
            }

            const manifest = JSON.parse(stdout);
            const expectedPlatformCount = parseInt(process.env.EXPECTED_PLATFORM_COUNT);

            assert.equal(manifest.length, expectedPlatformCount, `Expected ${expectedPlatformCount} platforms, got: ${manifest.length}`);

            const expectedPlatforms = JSON.parse(process.env.EXPECTED_PLATFORMS);
            expectedPlatforms.forEach(platformStr => {
              const [os, arch] = platformStr.split('/');
              const platformExists = manifest.some(
                platform => (
                  platform?.Descriptor?.platform?.architecture === arch &&
                  platform?.Descriptor?.platform?.os === os
                )
              );

              assert(platformExists, `Expected platform not found: ${platformStr}`);
            });

      - name: Install cosign
        if: matrix.sign
        uses: sigstore/cosign-installer@faadad0cce49287aee09b3a48701e75088a2c6ad # v4.0.0

      - name: Verify image signature
        if: matrix.sign
        env:
          IMAGE_NAME: ${{ needs.arrange.outputs.image-name-prefix }}-${{ matrix.image-name-suffix }}
          IMAGE_TAG: 0.1.0
        run: |
          cosign verify \
            --certificate-oidc-issuer https://token.actions.githubusercontent.com \
            --certificate-identity-regexp https://github.com/hoverkraft-tech/ci-github-container \
            ghcr.io/hoverkraft-tech/ci-github-container/"${IMAGE_NAME}":"${IMAGE_TAG}"

      - name: Install cosign for unsigned verification
        if: ${{ !matrix.sign }}
        uses: sigstore/cosign-installer@faadad0cce49287aee09b3a48701e75088a2c6ad # v4.0.0

      - name: Verify image is NOT signed (should fail)
        if: ${{ !matrix.sign }}
        env:
          IMAGE_NAME: ${{ needs.arrange.outputs.image-name-prefix }}-${{ matrix.image-name-suffix }}
          IMAGE_TAG: 0.1.0
        continue-on-error: true
        id: verify-unsigned
        run: |
          cosign verify \
            --certificate-oidc-issuer https://token.actions.githubusercontent.com \
            --certificate-identity-regexp https://github.com/hoverkraft-tech/ci-github-container \
            ghcr.io/hoverkraft-tech/ci-github-container/"${IMAGE_NAME}":"${IMAGE_TAG}"

      - name: Assert verification failed (image should not be signed)
        if: ${{ !matrix.sign && steps.verify-unsigned.outcome == 'success' }}
        run: |
          echo "ERROR: Image should not be signed but signature verification succeeded"
          exit 1

  act-build-args-secrets-and-registry-caching:
    name: Act - Build with args, secrets and registry caching
    needs: arrange
    uses: ./.github/workflows/docker-build-images.yml
    secrets:
      oci-registry-password: ${{ secrets.GITHUB_TOKEN }}
      build-secrets: |
        SECRET_TEST=test-secret
        SECRET_ANOTHER_TEST=another-test-secret
      build-secret-github-app-key: ${{ secrets.CI_BOT_APP_PRIVATE_KEY }}
    with:
      cache-type: registry
      images: |
        [
          {
            "name": "test-build-args-secrets",
            "context": ".",
            "target": "test",
            "dockerfile": "./tests/application/Dockerfile",
            "platforms": ["linux/amd64","linux/arm64"],
            "build-args": {
              "BUILD_RUN_ID": "${{ github.run_id }}",
              "BUILD_ARG_TEST": "test-arg",
              "BUILD_ARG_ANOTHER_TEST": "another-test-arg"
            },
            "secret-envs": {
              "SECRET_ENV_TEST": "GITHUB_ACTION",
              "SECRET_ENV_ANOTHER_TEST": "GITHUB_JOB"
            }
          }
        ]
      build-secret-github-app-id: ${{ vars.CI_BOT_APP_ID }}
      build-secret-github-app-token-env: |
        SECRET_ENV_GITHUB_APP_TOKEN_1
        SECRET_ENV_GITHUB_APP_TOKEN_2

  assert-build-args-secrets-and-registry-caching:
    name: Assert - Build with args, secrets and registry caching
    needs: act-build-args-secrets-and-registry-caching
    runs-on: "ubuntu-latest"
    steps:
      - name: Check built images ouput
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          script: |
            const assert = require("assert");

            const builtImagesOutput = `${{ needs.act-build-args-secrets-and-registry-caching.outputs.built-images }}`;
            assert(builtImagesOutput.length, `"built-images" output is empty`);

            // Check if is valid Json
            let builtImages = null;
            try {
              builtImages = JSON.parse(builtImagesOutput);
            } catch (error) {
              throw new Error(`"built-images" output is not a valid JSON: ${error}`);
            }

            const expectedCreatedImages = [
              "test-build-args-secrets"
            ];

            assert(typeof builtImages === "object" && !Array.isArray(builtImages), `"built-images" output is not an object`);
            assert.equal(Object.keys(builtImages).length, expectedCreatedImages.length, `"built-images" output does not contain ${expectedCreatedImages.length} images`);

            for (const image of expectedCreatedImages) {
              assert(builtImages[image], `"built-images" output does not contain "${image}" image`);
            }
      - uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Check docker image and cache
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          script: |
            const assert = require("assert");

            let expectedTag;

            const isPullRequest = `${{ github.event_name }}` === "pull_request";
            if (isPullRequest) {
              const shortSha = `${{ github.sha }}`.substring(0, 7);
              expectedTag = `pr-${{ github.event.pull_request.number }}-${shortSha}`;
            } else {
              expectedTag = `${{ github.ref_name }}`;
            }

            const digest = `${{ fromJson(needs.act-build-args-secrets-and-registry-caching.outputs.built-images).test-build-args-secrets.digest }}`;
            assert(digest.length, `"built-images" output does not contain digest for "test-build-args-secrets" image`);
            assert.match(digest, /^sha256:[0-9a-f]{64}$/, `"built-images" output does not contain valid digest for "test-build-args-secrets" image`);

            const expectedImage = `ghcr.io/hoverkraft-tech/ci-github-container/test-build-args-secrets`;
            const expectedImageTag = `${expectedImage}:${expectedTag}@${digest}`;

            const image = `${{ fromJson(needs.act-build-args-secrets-and-registry-caching.outputs.built-images).test-build-args-secrets.images[0] }}`;

            assert.equal(image, expectedImageTag, `"built-images" output is not valid. Expected "${expectedImage}", got "${image}"`);

            await exec.exec('docker', ['pull', image]);

            let expectedCacheTag;

            if (isPullRequest) {
              expectedCacheTag = `pr-${{ github.event.pull_request.number }}`;
            } else {
              expectedCacheTag = `${{ github.ref_name }}`;
            }

            const cacheImage = `${expectedImage}/cache:${expectedCacheTag}`;

            const cacheImages = [
              `${cacheImage}-linux-arm64`,
              `${cacheImage}-linux-amd64`
            ];

            for (const cacheImage of cacheImages) {
              await exec.exec('docker', ['manifest', 'inspect', cacheImage]);
            }

  cleanup:
    name: Cleanup ephemeral test packages
    if: always()
    needs:
      - arrange
      - assert-images
      - assert-build-args-secrets-and-registry-caching
    runs-on: ubuntu-latest
    steps:
      - name: Delete ephemeral test packages
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IMAGE_PREFIX: ${{ needs.arrange.outputs.image-name-prefix }}
        run: |
          # Delete ephemeral test packages created during testing
          for SUFFIX in mono-arch-signed multi-arch-signed mono-arch-unsigned multi-arch-unsigned; do
            IMAGE_NAME="${IMAGE_PREFIX}-${SUFFIX}"
            gh api \
              --method DELETE \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /orgs/${{ github.repository_owner }}/packages/container/ci-github-container%2F"${IMAGE_NAME}" || echo "No ${IMAGE_NAME} package to delete"
          done

# jscpd:ignore-end
