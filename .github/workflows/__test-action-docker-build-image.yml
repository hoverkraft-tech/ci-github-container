---
name: Test for "docker/build-image" action
run-name: Test for "docker/build-image" action

on: # yamllint disable-line rule:truthy
  workflow_call:

permissions:
  contents: read
  packages: write

# jscpd:ignore-start
jobs:
  tests:
    name: Test for "docker/build-image" action
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Arrange - Checkout
        uses: actions/checkout@v4

      - name: Arrange - Ensure token is set
        run: |
          if [ -z "${{ github.token }}" ]; then
            echo "GitHub token is not set"
            exit 1
          fi

      - name: Act - Build image
        id: build-image
        uses: ./actions/docker/build-image
        with:
          oci-registry: ghcr.io
          oci-registry-password: ${{ github.token }}
          context: "."
          dockerfile: "./tests/application/Dockerfile"
          target: "prod"
          platform: "linux/amd64"
          image: application-test

      - name: Assert - Check built image output
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const assert = require("assert");

            const builtImageOutput = ${{ steps.build-image.outputs.built-image }};
            assert(builtImageOutput, `"built-image" output is empty`);
            assert.equal(builtImageOutput.name, "application-test", `"name" output is not valid`);
            assert.equal(builtImageOutput.registry, "ghcr.io", `"registry" output is not valid`);
            assert.equal(
              builtImageOutput.repository,
              "hoverkraft-tech/ci-github-container/application-test",
              `"repository" output is not valid`
            );
            assert.equal(
              builtImageOutput.digests.length,
              1,
              `"digests" output is not valid`
            );
            assert.match(
              builtImageOutput.digests[0],
              /^ghcr\.io\/hoverkraft-tech\/ci-github-container\/application-test@sha256:[a-f0-9]{64}$/,
              `"digests" output is not valid`
            );

            // Annotations
            assert.match(
              builtImageOutput.annotations["org.opencontainers.image.created"],
              /[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]{3}Z/,
              `"annotations.org.opencontainers.image.created" output is not valid`
            );
            assert.equal(
              builtImageOutput.annotations["org.opencontainers.image.description"],
              "Opinionated GitHub Actions and workflows for continuous integration in container (OCI) context",
              `"annotations.org.opencontainers.image.authors" output is not valid`
            );
            assert.equal(
              builtImageOutput.annotations["org.opencontainers.image.licenses"],
              "MIT",
              `"annotations.org.opencontainers.image.licenses" output is not valid`
            );
            assert.match(
              builtImageOutput.annotations["org.opencontainers.image.revision"],
              /^[a-f0-9]{40}$/,
              `"annotations.org.opencontainers.image.revision" output is not valid`
            );
            assert.equal(
              builtImageOutput.annotations["org.opencontainers.image.source"],
              "https://github.com/hoverkraft-tech/ci-github-container",
              `"annotations.org.opencontainers.image.source" output is not valid`
            );
            assert.equal(
              builtImageOutput.annotations["org.opencontainers.image.title"],
              "ci-github-container",
              `"annotations.org.opencontainers.image.title" output is not valid`
            );
            assert.equal(
              builtImageOutput.annotations["org.opencontainers.image.url"],
              "https://github.com/hoverkraft-tech/ci-github-container",
              `"annotations.org.opencontainers.image.url" output is not valid`
            );

            if (`${{ github.event_name }}` === "pull_request") {
              const shortSha = `${{ github.sha }}`.substring(0, 7);
              const prShaTag = `pr-${{ github.event.pull_request.number }}-${shortSha}`;
              const prTag = `pr-${{ github.event.pull_request.number }}`;

              assert.equal(builtImageOutput.tags.length, 2, `"tags" output is not valid`);

              assert.equal(builtImageOutput.tags[0], prShaTag, `"tags" output is not valid`);
              assert.equal(builtImageOutput.tags[1], prTag, `"tags" output is not valid`);

              assert.equal(
                builtImageOutput.images.length,
                2,
                `"images" output is not valid`
              );
              assert.equal(
                builtImageOutput.images[0],
                `ghcr.io/hoverkraft-tech/ci-github-container/application-test:${prShaTag}`,
                `"images" output is not valid`
              );
              assert.equal(
                builtImageOutput.images[1],
                `ghcr.io/hoverkraft-tech/ci-github-container/application-test:${prTag}`,
                `"images" output is not valid`
              );
              assert.equal(
                builtImageOutput.annotations["org.opencontainers.image.version"],
                prTag,
                `"annotations.org.opencontainers.image.version" output is not valid`
              );

            } else {
              const refTag = `${{ github.ref_name }}`;

              assert.equal(builtImageOutput.tags.length, 1, `"tags" output is not valid`);
              assert.equal(builtImageOutput.tags[0], refTag, `"tags" output is not valid`);

              assert.equal(builtImageOutput.images.length, 1, `"images" output is not valid`);
              assert.equal(
                builtImageOutput.images[0],
                `ghcr.io/hoverkraft-tech/ci-github-container/application-test:${refTag}`,
                `"images" output is not valid`
              );

              assert.equal(
                builtImageOutput.annotations["org.opencontainers.image.version"],
                refTag,
                `"annotations.org.opencontainers.image.version" output is not valid`
              );
            }

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Assert - Check docker digests
        run: |
          DIGESTS=$(echo '${{ steps.build-image.outputs.built-image }}' | jq -r '.digests[]')
          for DIGEST in $DIGESTS; do
            if ! docker pull "$DIGEST"; then
              echo "Failed to pull $DIGEST"
              exit 1
            fi

            if ! docker manifest inspect "$DIGEST"; then
              echo "Failed to inspect $DIGEST"
              exit 1
            fi
          done

  tests-with-given-tag:
    name: Test for "docker/build-image" action with given tag
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Arrange - Checkout
        uses: actions/checkout@v4

      - name: Arrange - Ensure token is set
        run: |
          if [ -z "${{ github.token }}" ]; then
            echo "GitHub token is not set"
            exit 1
          fi

      - name: Act - Build image
        id: build-image
        uses: ./actions/docker/build-image
        with:
          oci-registry: ghcr.io
          oci-registry-password: ${{ github.token }}
          context: "."
          dockerfile: "./tests/application/Dockerfile"
          target: "prod"
          platform: "linux/amd64"
          image: application-test
          tag: "0.1.0"

      - name: Assert - Check built image output
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const assert = require("assert");

            const builtImageOutput = ${{ steps.build-image.outputs.built-image }};
            assert(builtImageOutput, `"built-image" output is empty`);

            assert.equal(builtImageOutput.tags.length, 1, `"tags" output is not valid`);
            assert.equal(builtImageOutput.tags[0], '0.1.0', `"tags" output is not valid`);

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Assert - Check docker digests
        run: |
          DIGESTS=$(echo '${{ steps.build-image.outputs.built-image }}' | jq -r '.digests[]')
          for DIGEST in $DIGESTS; do
            if ! docker pull "$DIGEST"; then
              echo "Failed to pull $DIGEST"
              exit 1
            fi

            if ! docker manifest inspect "$DIGEST"; then
              echo "Failed to inspect $DIGEST"
              exit 1
            fi
          done

# jscpd:ignore-end
