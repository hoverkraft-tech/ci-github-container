---
name: Test for "docker/prune-pull-requests-image-tags" action
run-name: Test for "docker/prune-pull-requests-image-tags" action

on: # yamllint disable-line rule:truthy
  workflow_call:

permissions:
  contents: read
  issues: read
  packages: write
  pull-requests: read
  # FIXME: This is a workaround for having workflow actions. See https://github.com/orgs/community/discussions/38659
  id-token: write

env:
  IMAGE: "test-prune-${{ github.run_number }}"

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.generate-tag.outputs.tag }}
    steps:
      - run: |
          if [ -z "${{ secrets.GITHUB_TOKEN }}" ]; then
            echo "GitHub token secrets is not set"
            exit 1
          fi

      - id: generate-tag
        run: |
          TAG="pr-$(( 1 + RANDOM % 210))"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

  arrange:
    name: Arrange - Build images
    needs: setup
    uses: ./.github/workflows/docker-build-images.yml
    secrets:
      oci-registry-password: ${{ secrets.GITHUB_TOKEN }}
    with:
      images: |
        [
          {
            "name": "test-prune-${{ github.run_number }}",
            "context": ".",
            "dockerfile": "./tests/application/Dockerfile",
            "build-args": { "PROD_MODE": "true" },
            "target": "prod",
            "platforms": ["linux/amd64","linux/arm64"]
          }
        ]

  act:
    runs-on: ubuntu-latest
    needs: [setup, arrange]
    permissions:
      packages: write
    outputs:
      deleted-image-tags: ${{ steps.prune-pull-requests-image-tags.outputs.deleted-image-tags }}
    steps:
      - uses: actions/checkout@v4

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push extra docker image tags for test
        run: |
          BASE_IMAGE=$(echo '${{ needs.arrange.outputs.built-images }}' | jq -r '."${{ env.IMAGE }}".images[0]')
          NEW_IMAGE=ghcr.io/hoverkraft-tech/ci-github-container/${{ env.IMAGE }}:${{ needs.setup.outputs.tag }}

          docker pull "$BASE_IMAGE"
          docker tag "$BASE_IMAGE" "$NEW_IMAGE"
          docker push "$NEW_IMAGE"

      - id: prune-pull-requests-image-tags
        uses: ./actions/docker/prune-pull-requests-image-tags
        with:
          image: ${{ env.IMAGE }}

  assert:
    runs-on: ubuntu-latest
    needs: [setup, arrange, act]
    steps:
      - name: Assert - Check ouputs
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const assert = require("assert");

            const deletedImageTagsOutput = `${{ needs.act.outputs.deleted-image-tags }}`;
            assert(deletedImageTagsOutput.length, `"deleted-image-tags" output is empty`);

            // Check if is valid Json
            let deletedImageTags = null;
            try {
              deletedImageTags = JSON.parse(deletedImageTagsOutput);
            } catch (error) {
              throw new Error(`"deleted-image-tags" output is not a valid JSON: ${error}`);
            }

            assert(Array.isArray(deletedImageTags), `"deleted-image-tags" output is not an array`);
            assert.equal(deletedImageTags[0], `${{ needs.setup.outputs.tag }}`);

            // If is pull request ensure that deleted tags does not contain current pull request
            const pullRequestNumber = `${{ github.event.pull_request.number }}`;
            if (pullRequestNumber.length) {
              const deletedImageTagsForCurrentPullRequest = deletedImageTags.filter((imageTag) => imageTag.includes(`pr-${pullRequestNumber}`));
              assert.equal(deletedImageTagsForCurrentPullRequest.length, 0, `"deleted-image-tags" output contains current pull request image tag`);
            }

      - name: Assert - Ensure packages versions have been deleted
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ github.token }}
          script: |
            const assert = require("assert");
            const packagePayload = {
              package_type: 'container',
              package_name: 'ci-github-container/${{ env.IMAGE }}',
              org: 'hoverkraft-tech',
            };

            const packageVersions = await github.paginate(
              github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg.endpoint.merge(packagePayload)
            );

            const packageVersionExists = packageVersions.some(
              (packageVersion) => packageVersion.metadata.container.tags.some(
                (tag) => tag === "${{ needs.setup.outputs.tag }}"
              )
            );
            assert.equal(packageVersionExists, false, `Package version "${{ needs.setup.outputs.tag }}" has not been deleted`);

      - uses: docker/login-action@v3
        if: ${{ github.event_name == 'pull_request' }}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Assert - Ensure current image tag didn't get deleted
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          for IMAGE_TAG in $(echo '${{ needs.arrange.outputs.built-images }}' | jq -r '."${{ env.IMAGE }}".images[]'); do
            docker pull "$IMAGE_TAG"

            if ! MANIFEST=$(docker manifest inspect "$IMAGE_TAG"); then
              echo "Failed to inspect manifest for image: ${IMAGE_TAG}"
              exit 1
            fi

            echo "$MANIFEST"

            # Ensure all manifest digests didn't get deleted
            for DIGEST in $(echo "$MANIFEST" | jq -r '.manifests[].digest'); do
              IMAGE_MANIFEST="ghcr.io/hoverkraft-tech/ci-github-container/${{ env.IMAGE }}@$DIGEST"
              docker pull "$IMAGE_MANIFEST"
              if ! docker manifest inspect "$IMAGE_MANIFEST" > /dev/null; then
                echo "Failed to inspect manifest for image: ${IMAGE_MANIFEST}"
                exit 1
              fi
            done
          done

  cleanup:
    needs: assert
    runs-on: "ubuntu-latest"
    permissions:
      packages: write
    if: always()
    steps:
      - uses: actions/checkout@v4

      - id: get-issue-number
        if: ${{ github.event_name == 'pull_request' }}
        uses: hoverkraft-tech/ci-github-common/actions/get-issue-number@0.16.0

      - name: Delete test packages
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ github.token }}
          script: |
            const packagesToDelete = ["${{ env.IMAGE }}", "${{ env.IMAGE }}/cache"];

            for (const packageName of packagesToDelete) {
              const packagePayload = {
                package_type: 'container',
                package_name: `ci-github-container/${packageName}`,
                org: 'hoverkraft-tech',
              };

              try {
                await github.rest.packages.deletePackageForOrg(packagePayload);
              } catch (error) {
                if (error.status === 404) {
                  core.warning(`Package "${packagePayload.package_name}" not found.`);
                } else {
                  throw error;
                }
              }

            }
