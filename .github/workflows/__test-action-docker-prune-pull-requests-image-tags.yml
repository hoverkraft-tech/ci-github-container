---
name: Test for "docker/prune-pull-requests-image-tags" action
run-name: Test for "docker/prune-pull-requests-image-tags" action

on: # yamllint disable-line rule:truthy
  workflow_call:

permissions:
  contents: read
  issues: read
  packages: write
  pull-requests: read
  id-token: write

env:
  IMAGE_NAME: "test-prune-${{ github.run_number }}"
  PACKAGES: |
    ci-github-container/test-prune-${{ github.run_number }}
    ci-github-container/test-prune-${{ github.run_number }}/cache

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.generate-tag.outputs.tag }}
    steps:
      - run: |
          if [ -z "${{ secrets.GITHUB_TOKEN }}" ]; then
            echo "GitHub token secrets is not set"
            exit 1
          fi

      - id: generate-tag
        run: |
          TAG="pr-$(( 1 + RANDOM % 210))"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

  arrange:
    name: Arrange - Build images
    needs: setup
    uses: ./.github/workflows/docker-build-images.yml
    secrets:
      oci-registry-password: ${{ secrets.GITHUB_TOKEN }}
    with:
      cache-type: registry
      images: |
        [
          {
            "name": "test-prune-${{ github.run_number }}",
            "context": ".",
            "dockerfile": "./tests/application/Dockerfile",
            "build-args": { "BUILD_RUN_ID": "${{ github.run_id }}" },
            "target": "prod",
            "platforms": ["linux/amd64","linux/arm64"]
          }
        ]

  act:
    name: Act - Prune pull requests image tags
    runs-on: ubuntu-latest
    needs: [setup, arrange]
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate a image tag that should be deleted
        run: |
          BASE_IMAGE=$(echo '${{ needs.arrange.outputs.built-images }}' | jq -r '."${{ env.IMAGE_NAME }}".images[0]')
          NEW_IMAGE=ghcr.io/hoverkraft-tech/ci-github-container/${{ env.IMAGE_NAME }}:${{ needs.setup.outputs.tag }}

          docker pull "$BASE_IMAGE"
          docker tag "$BASE_IMAGE" "$NEW_IMAGE"
          docker push "$NEW_IMAGE"

      - id: prune-pull-requests-image-tags
        uses: ./actions/docker/prune-pull-requests-image-tags
        with:
          image: ${{ env.IMAGE_NAME }}

  assert:
    name: Assert - Verify deleted image tags
    runs-on: ubuntu-latest
    needs: [setup, arrange, act]
    steps:
      - name: Assert - Ensure expected packages versions have been deleted
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const assert = require("assert");

            const packages = process.env.PACKAGES.split("\n").map(packageName => packageName.trim()).filter(Boolean);

            for(const packageName of packages) {
              const packagePayload = {
                package_type: 'container',
                package_name: packageName,
                org: process.env.GITHUB_REPOSITORY_OWNER,
              };

              const packageVersions = await github.paginate(
                github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg.endpoint.merge(packagePayload)
              );

              const packageVersionExists = packageVersions.some(
                (packageVersion) => packageVersion.metadata.container.tags.some(
                  (tag) => tag === "${{ needs.setup.outputs.tag }}"
                )
              );
              assert.equal(packageVersionExists, false, `Package version "${{ needs.setup.outputs.tag }}" has not been deleted`);
            }

      - uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        if: ${{ github.event_name == 'pull_request' }}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Assert - Ensure current image tag didn't get deleted
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          for IMAGE_TAG in $(echo '${{ needs.arrange.outputs.built-images }}' | jq -r '."${{ env.IMAGE_NAME }}".images[]'); do
            docker pull "$IMAGE_TAG"

            if ! MANIFEST=$(docker manifest inspect "$IMAGE_TAG"); then
              echo "Failed to inspect manifest for image: ${IMAGE_TAG}"
              exit 1
            fi

            echo "$MANIFEST"

            # Ensure all manifests digest didn't get deleted
            for DIGEST in $(echo "$MANIFEST" | jq -r '.manifests[].digest'); do
              IMAGE_MANIFEST="ghcr.io/hoverkraft-tech/ci-github-container/${{ env.IMAGE_NAME }}@$DIGEST"
              docker pull "$IMAGE_MANIFEST"
              if ! docker manifest inspect "$IMAGE_MANIFEST" > /dev/null; then
                echo "Failed to inspect manifest for image: ${IMAGE_MANIFEST}"
                exit 1
              fi
            done
          done

  cleanup:
    needs: assert
    runs-on: "ubuntu-latest"
    permissions:
      packages: write
    if: always()
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Delete test packages
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const packages = process.env.PACKAGES.split("\n").map(packageName => packageName.trim()).filter(Boolean);
            await Promise.all(packages.map(packageName => {
              return github.rest.packages.deletePackageForOrg({
                package_type: 'container',
                package_name: packageName,
                org: process.env.GITHUB_REPOSITORY_OWNER,
              });
            }));
